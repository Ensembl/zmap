#!/usr/local/bin/perl -w

use strict;
use warnings;
use Getopt::Long;
use Data::Dumper;
use Cwd qw(abs_path getcwd);
use File::Basename;

my $QUIET = 0;
{
    my $checkout_dir = 'ZMap';
    sub checkout_dir{
        return $checkout_dir;
    }
    sub set_checkout_dir{
        my ($path, $name) = @_;

        $path = abs_path($path);
        if($path =~ m!(.+/$name)/(.+)!){
            $checkout_dir = $1;
        }else{
            $checkout_dir = $path;
        }
        print STDERR "Using '" .checkout_dir() . "' as Checkout Directory.\n" unless $QUIET;
    }
}

{
    # SOME DEFAULTS
    my $VERSION_FILE = 'src/zmapUtils/zmapUtils_P.h';
    my $SRC          = abs_path(dirname($0));
    my $PREPROC_VARS = {qw(version ZMAP_VERSION
                           release ZMAP_RELEASE
                           update  ZMAP_UPDATE)
                        };
    my $VERSION_STR  = "ZMAP_VERSION-ZMAP_RELEASE-ZMAP_UPDATE";
    my $VS_PREFIX    = "RELEASE_";
    my $requested    = {};
    my $commit       = 0;
    my $tag          = 1;
    my $increment    = 0 ;
    my $usage = sub { exit(exec('perldoc', $0)) };
    my $all = sub {
        my $option = shift;
        if($option eq 'all'){ $requested = $PREPROC_VARS; return ;}
        $requested->{$option} = $PREPROC_VARS->{$option};
    };

    # encoding of logic for how to increment the version numbers
    # rotate, rotates the numbers to 0 if the more major number 
    # changes.  This is more preferable to the $blindly version 
    # which just increments everything!!!
    my $rotate = sub {
        if($requested->{version} && $_[0] eq $requested->{version}){
            return $_[1] + 1;            
        }elsif($requested->{release} && $_[0] eq $requested->{release}){
            return 0 if($requested->{version});
            return $_[1] + 1;
        }else{
            return 0 if($requested->{version});
            return 0 if($requested->{release});
            return $_[1] + 1;
        }
    };
    my $blindly = sub { return $_[1] + 1 };
    my $version_only = 0;
    GetOptions(
               'file=s'  => \$VERSION_FILE, # 
               'path=s'  => \$SRC,          # The path for the checkout dir
               'version' => $all,
               'release' => $all,
               'update'  => $all,
               'all'     => $all,
               'show'    => sub {$tag = 0},
	       'increment' => \$increment,
               'cvs'     => \$commit,
               'quiet'   => \$QUIET,
               'V'       => \$version_only,
               'help'    => $usage,
               ) or $usage->();
    $usage->() unless $VERSION_FILE;

    $VERSION_STR  = $VS_PREFIX . $VERSION_STR unless $version_only;

    # ===================================================== #
    # Now do the work...
    set_checkout_dir($SRC, checkout_dir());
    my $version_path = find_file(checkout_dir(), $VERSION_FILE);

    my $cvs_tag = make_cvs_tag($version_path, $PREPROC_VARS, $VERSION_STR);

    print STDERR "The CVS tag should be $cvs_tag. \n" unless $QUIET;

    print "$cvs_tag\n";

    cvs_tag(checkout_dir, $cvs_tag) if $tag;

    exit($tag) unless $tag;

    if ( $increment )
      {
      # Make a copy of the version file, update the version, commit it and then
      # copy back the original.
      my $sys = "cp $version_path $version_path.backup";
      system($sys) == 0 or die "ERROR $0: Couldn't do '$sys'\n";

      increment_numbers($requested, $version_path, $rotate);
      cvs_commit($version_path, "/") if $commit;

      $sys = "cp -f $version_path.backup $version_path";
      system($sys) == 0 or die "ERROR $0: Couldn't do '$sys'\n";

      }

    $cvs_tag = make_cvs_tag($version_path, $PREPROC_VARS, $VERSION_STR);
    print STDERR "Development Version is now $cvs_tag\n" unless $QUIET;
}





# ================================================================== #
#                      SUBS                                          #
# ================================================================== #

# This _should_ safely find the $file in $path 
# assuming checkout directory $name
sub find_file{
    my ($path, $file) = @_;
    $path .= "/$file";
    return $path if($path && -e $path);
    die "ERROR $0: ".
        "Couldn't find '$file' under '$path'...\n".
        "Suggest using -path option\n";
}

# Increment the version numbers in $file according 
# to logic in $rotate
sub increment_numbers{
    my ($req, $file, $rotate) = @_;
    my $bak   = "${file}.bak";
    my @ppvar = values(%$req);
    return unless @ppvar;
    my $reg   = join("|", @ppvar);
    
    open(my $fhIN, "< $file") or die "ERROR $0: Couldn't open file '$file' : $! \n";
    open(my $fhOUT, "> $bak") or die "ERROR $0: Couldn't open backup for file '$file': $! \n";
    while(<$fhIN>){
        # look for ZMAP_{VERSION,RELEASE,UPDATE} NUMBER and increment number.
        # $rotate has logic for how we do this!
        s/^(\#define\s($reg))\s*(\d+)/$1 . " " .$rotate->($2, $3)/e;
        print $fhOUT $_;
    }
    close $fhIN;
    close $fhOUT;

    unlink $file;
    rename $bak, $file;

    return ;
}

# Makes the cvs tag by replacing current PREPROCCESSOR DIRECTIVE 
# variables (present in $req) from the $file in $tag.
sub make_cvs_tag{
    my ($file, $req, $tag) = @_;
    
    my @ppvar = values(%$req);
    return unless @ppvar;
    my $reg   = join("|", @ppvar);

    
    open(my $fhIN, "< $file") or die "ERROR $0: Couldn't open file '$file' : $! \n";
    while(<$fhIN>){
        s/^(\#define\s($reg))\s*(\d+)/$1 . " " .($3 + 1)/e;
        if(defined($2) && defined($3)){
            my ($ppvar, $value) = ($2, $3);
            $tag =~ s/$ppvar/$value/;
        }
    }
    close $fhIN;

    return $tag;
}

# Tag the files under $co (Checkout dir) with $tag 
sub cvs_tag{
    my ($co, $tag) = @_;
    print STDERR "Tagging $co with tag $tag\n";

    my $sys = "cvs tag -F $tag >/dev/null";

    chdir($co);
    
    print STDERR "current directory '".getcwd()."'\n";
    print STDERR "*** Running $sys ***\n";

    system($sys) == 0 or die "ERROR $0: Couldn't do '$sys'\n";

}

# commit file in $path
sub cvs_commit{
    my($path, $sep) = @_;

    $sep||= "/";
    my @p = split($sep, $path);
    my $b = pop(@p);
    my $d = join($sep, @p);

    my $sys = "cvs commit -m '$0 run by ".(getpwuid($<))[0]."' $b >/dev/null";

    chdir($d);

    print STDERR "current directory '".getcwd()."'\n";

    system($sys) == 0 or die "ERROR $0: Couldn't do '$sys'\n";
}

1;
__END__

=pod

=head1 versioner

 script to manipulate zmap versioning

=head1 DESCRIPTION

 Does something with zmap code automatically getting/setting the version

=head1 USAGE

 versioner [options]

    -file     Name of the file containing the versions
    -path     Path of the checkout directory.


 what should be incremented:

    -version  increment the version
    -release  increment the release
    -update   increment the update
    -all      increment all the above

 how should the file be incremented in cvs:

    -cvs      CVS Commit the -file file
    -increment increment the version in cvs but not the current checkout

    -show     just show the tag
    -V        just show the version part of the cvs tag
    -help     Display this help
    


=cut

