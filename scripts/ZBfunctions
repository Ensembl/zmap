#!/bin/echo Run as '. ZBfunctions unset' Or '. ZBfunctions <build script>' Note the DOT, see usage at top of file.
#
# Sets up general functions needed by all ZMap build scripts, these
# general functions have the prefix "ZB" for Zmap Build.
#
# Should be run as a dot script as the first statement executed in all
# build scripts, $0 should be given as the single arg so the script name
# can be included in messages: 
#                                . ZBfunctions $0
#
# to unset the functions call like this:
#
#                                . ZBfunctions unset
#
# Note that this will pick up the first ZBfunctions on your path which should
# be the same as your script versions, if you don't like this then give some
# kind of more restrictive directory spec.
#

ZBbuildOSDir=""
ZBDebug=""

if [ "$1" = "unset" ]; then

    # UNSET the functions used
    unset ZBmsgAndExit ZBmsgInfo
elif [ "x$1" = "x" ]; then
   ./ZBfunctions
else

if [ "x$ZBDebug" = "xtrue" ]; then
  set -x
fi

ZBExportOSVars()
{
    opsys=`uname`

    case $opsys in

        OSF1 )
            ZBbuildOSCanon="ALPHA"
            ZBbuildOSDir=build/alpha ;;
        Linux )
            ZBbuildOSCanon="LINUX"
            ZBbuildOSDir=build/linux ;;
        Darwin )
            ZBbuildOSCanon="MACOSX"
            ZBbuildOSDir=build/macosx ;;
        * )
            ZBmsgAndExit "unsupported operating system: $opsys" ;;       
    esac
}

ZBGotoDir ()
{

  cd $1 || ZBmsgAndExit "Cannot cd to ZMap build directory: $1"
  echo "$0: now in "`pwd` >&2
}

# If the global variable ZMmailOnExit is set then the error message is sent
# to the zmap developers before exitting.
ZBmsgAndExit ()
{
  errmsg="$ZBscript - Fatal Error: $1"

  if [ -n "$ZBmailOnExit" ]
  then
    ZBmsgMail "$errmsg" 'Failed'
  fi

  echo "$errmsg"

  exit 1
}


ZBmsgInfo ()
{
  msg="$ZBscript - Info: $1"

  if [ -n "$ZBmailOnExit" ]
  then
    ZBmsgMail "$msg" 'OK'
  fi

  echo "$msg"
}


# Function requires two arguments:
#
#       ZBmsgMail "error message" 'mail subject suffix'
#
# e.g.  ZBmsgMail "Rubbish coding by Ed" 'OK'
#
# mailx is used because there are complications on the Alphas with what
# flags are supported by the basic mail program.
#
ZBmsgMail ()
{

mailx -s "ZMap Build - $2" zmapdev <<EOF

Build Message:

$1
EOF

}

ZBbuildNotifyMail()
{

mailx -s "ZMap Release" $1 <<EOF

Build Message:

A new version of ZMap is now available.

Release Location: $2
Release Version:  $3
Release Notes:    $4

EOF

}

ZBlogmsg ()
{
  echo
  echo "----- $ZBscript (`date`): $1 -----"
  echo
}


ZBusage ()
{
  if [ -n "$3" ]
  then
    echo
    echo "Warning: $3"
  fi

  echo
  echo "Usage:   $ZBscript $1"
  echo
  echo "$2"
  echo

  exit 1
}

ZBRemoteDirectories ()
{
    ZBRBaseDir=`ssh $1 zmapbase`
    
    ZBRbuildBase=$ZBRBaseDir/BUILDS
    ZBROverDir="$ZBRBaseDir/BUILD.OVERNIGHT"
    ZBROverBinDir="$ZBRBaseDir/BIN.OVERNIGHT"
    ZBRDevDir="$ZBRBaseDir/BUILD.DEVELOPMENT"
    ZBRDevBinDir="$ZBRBaseDir/BIN.DEVELOPMENT"
}

# WARNING INSANITY FOLLOWS
#Arrgh this hurts....

# Basically  because we have  a machine  which cannot  currently mount
# ~zmap as ~zmap we need to have this. Why? 

# Because:
# local -> ssh build machine
# build machine includes _this_ file.
# finds ZBBaseBir = ~zmap, but it doesn't it's more like ~zmap/nfs_mount!

opsys=`uname`
case $opsys in
    
    OSF1 )
        real_home=~zmap ;;
    Linux )
        real_home=~zmap ;;
    Darwin )
        real_home=~zmap/nfs_mount ;;
        real_home=~zmap ;;
    * )
        ZBmsgAndExit "unsupported operating system: $opsys" ;;       
esac
# END OF INSANE BIT


ZBsafeCVSadd ()
{
    file_to_add=$1
    if [ "x$ZBCVSacceptDuplicates" = "xtrue" ]; then
       cvs add $file_to_add 2>&1 | \
            grep -v 'No xauth data' | \
            tee cvs.log && \
            perl -ne 'END{ unlink "cvs.log"; } exit 1 unless (/already exists/)' cvs.log || \
            ZBmsgAndExit "Failed to cvs add $file_to_add"
    else
      cvs add $file_to_add || ZBmsgAndExit "Failed to cvs add $file_to_add"
    fi
}


# all variables must be after functions...
#
ZBscript=`basename $1`

ZBBaseDir=$real_home
ZBbuildBase=$ZBBaseDir/BUILDS
ZBReleaseBase=$ZBbuildBase/RELEASE_NOTES
ZBOverDir="$ZBBaseDir/BUILD.OVERNIGHT"
ZBOverBinDir="$ZBBaseDir/BIN.OVERNIGHT"
ZBDevDir="$ZBBaseDir/BUILD.DEVELOPMENT"
ZBDevBinDir="$ZBBaseDir/BIN.DEVELOPMENT"

# Add new build machines to this list, separate with a blank within the single string.
# NOTE THAT THE FIRST MACHINE IN THE LIST _MUST_ BE ABLE TO BUILD THE DOCS....see loop
# in zmapbootstrap script. We only build on this machine at the moment because the Mac
# is not on the network....
ZBmachines='deskpro16113'

# Add new acedb binaries to this list, separate with a blank within the single string.
ZBAcedbHOME=~acedb
ZBAcedbBinaries='tace xace sgifaceserver giface makeUserPasswd blixem dotter xremote'
ZBAcedbVersion=DEVELOPMENT
#ZBAcedbCVSRoot=$ZBAcedbHOME/CVS_ACEDB

CVSROOT=DESPOT
CVS_RSH=ssh
export CVS_RSH CVSROOT

#ZBCVSLogin=:ext:zmap@cbi4:
ZBCVSRoot=':ext:cvs.internal.sanger.ac.uk:/repos/cvs/zmap'
ZBgetRTtickets=getRTtickets

# REMOTE DIRECTORIES
ZBRbuildBase=""
ZBROverDir=""
ZBROverBinDir=""
ZBRDevDir=""
ZBRDevBinDir=""

fi


#
# do NOT exit from this, it is run as a dot script by other shell scripts.
#
