#!/bin/bash
#
# Launch a full build....doing the git checkout etc....
#
#
#
#
#


# Program stuff.
RC=0
PROGNAME=`basename $0`
FUNCTIONS_SCRIPT="./zmap_functions.sh"
BASE_DIR=~zmap

# try to load useful shared shell functions...after this we will have access to
# common message funcs.
. $FUNCTIONS_SCRIPT || { echo "Aborted $PROGNAME - Failed to load common functions file: $FUNCTIONS_SCRIPT"; exit 1; }

branch='develop'
headline='DEVELOP'
script='development'
sub_branch=''
branch_arg=''
respository_name='./ZMap'
seqtools_dir=''


# Do args.
#
usage="$PROGNAME [ -d -f <feature_sub_branch e.g. New_XRemote> -o -p -r <release_sub_branch e.g. 0.8.0> -s <seqtools_dir> -g <gbtools_branch> ]"

while getopts ":df:g:opr:s:" opt ; do
    case $opt in
	d  ) branch='develop'
	     headline='DEVELOP'
	     script='development' ;;
	f  ) branch='feature'
	     headline='FEATURE'
	     sub_branch="/$OPTARG"
	     branch_arg="$branch$sub_branch"
	     script='feature' ;;
	g  ) gbtools_branch=$OPTARG;;
	o  ) branch='develop'
	     headline='OVERNIGHT'
	     script='overnight' ;;
	p  ) branch='production'
	     headline='PRODUCTION'
	     script='production' ;;
	r  ) branch='release'
	     headline='RELEASE'
	     sub_branch="/$OPTARG"
	     branch_arg="$branch$sub_branch"
	     script='release' ;;
        s  ) seqtools_dir=$OPTARG ;;

	\? ) zmap_message_exit "Bad arg flag: $usage" ;;
    esac
done


# Process final arg.
#
shift $(($OPTIND - 1))

if [ $# != 0 ]; then
  zmap_message_exit "Bad args specified: $usage"
fi



# Headline...
#
zmap_message_out "-----------------------------------------------"
zmap_message_out "        ZMap $headline BUILD....."
zmap_message_out "-----------------------------------------------"


build_script="./zmap_build_$script.sh"
script_dir="$respository_name/scripts"


curr_dir=`pwd`


# Check out the requested branch.
#
if [[ -d $respository_name ]] ; then
  zmap_move_aside_dir $respository_name
fi

zmap_message_out "cloning $branch$sub_branch of zmap repository..."
git clone -b "$branch$sub_branch" git.internal.sanger.ac.uk:/repos/git/annotools/zmap.git $respository_name || zmap_message_exit "git clone failed"
zmap_message_out "finished cloning $branch$sub_branch of zmap repository..."

#
# Copy our gbtools utilities repository into the src subdirectory in the zmap clone.
# This is required to be part of the dist so users don't have to install it separately.
# ZMap is set up to build the gbtools subdirectory if it is there, so we don't need to
# do anything else here other than copy it in.
#
zmap_message_out "entering $curr_dir/$respository_name/src"
cd $curr_dir/$respository_name/src || zmap_message_exit "Cannot cd to $curr_dir/$respository_name/src"

zmap_message_out "coping in a clone of gbtools repository..."
git clone -b "$gbtools_branch" git.internal.sanger.ac.uk:/repos/git/annotools/gbtools.git gbtools || zmap_message_exit "git clone of gbtools failed"
zmap_message_out "finished cloning $gbtools_branch of gbtools repository"


cd $curr_dir/$script_dir || zmap_message_exit "Cannot cd to $curr_dir/$script_dir."


#
# Launch the build....
#
zmap_message_out "Starting build: $build_script $branch_arg $seqtools_dir"
$build_script $branch_arg $seqtools_dir || zmap_message_exit "build failed !"
zmap_message_out "Finished build....."


cd $curr_dir || zmap_message_exit "Cannot cd back to $curr_dir."


# Now clear up as we don't need the git checkout any more.
# 
if [[ -d $respository_name ]] ; then
  rm -rf $respository_name || zmap_message_exit "Cannot remove $respository_name, remove by hand before rebuilding."
else
  zmap_message_exit "Cannot erase git clone dir $respository_name, not found !"
fi


exit $RC

