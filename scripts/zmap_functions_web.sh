#!/bin/echo DOT SCRIPT please source

# Available functions:

# - make_header_ini
# Creates header.ini for each  directory under the directory supplied,
# based on the presence on $PARENT_INI_STUB and $THIS_INI_STUB files.

# - process_release_notes_files_for_web
# Creates an index.shtml for the Release Notes directory.

PARENT_INI_STUB=parent_links.ini
THIS_INI_STUB=this_links.ini


# private function...
# Usage: _make_header_ini_from_this_only <dir>
function _make_header_ini_from_this_only
{
    if [ "x$1" != "x" ]; then
	this_save_dir=$(pwd)
	zmap_cd $1

	if [ ! -f header.ini ]; then
	    # Get round this by using an empty this_links.ini in parent dir
	    cat ../header.ini > header.ini 2>/dev/null || zmap_message_err "No parent header.ini"
	    
	    if [ -f $THIS_INI_STUB ]; then
		cat this_links.ini >> header.ini
	    fi
	fi

	zmap_cd $this_save_dir
    fi
}

# private recursive function!
# Usage: _make_header_ini <dir>
function _make_header_ini
{
    if [ "x$1" != "x" ]; then
	zmap_cd $1

	cat ../header.ini > header.ini
	
	live_subdirs=$(find . -mindepth 2 -maxdepth 2 -name $PARENT_INI_STUB -type f)

	zmap_message_out $live_subdirs

	for subdir in $live_subdirs;
	  do
	  echo "# auto generated from $subdir" >> header.ini
	  cat $subdir >> header.ini
	  echo "" >> header.ini
	done

	c=$(date "+%S%N")

	echo "Include$c=<br/>" >> header.ini
	for subdir in $live_subdirs;
	  do
	  subdir=$(dirname $subdir)
	  _make_header_ini $subdir
	done

	if [ -f $THIS_INI_STUB ]; then
	    cat this_links.ini >> header.ini
	fi

	zmap_cd ..

    fi

}

# Usage: make_header_ini <dir>
function make_header_ini
{
    if [ "x$1" != "x" ]; then

	zmap_message_out "Starting make_header_ini [$1]"

	local save_dir=$(pwd)
	zmap_cd $1
	# I found a little bit of documentation on this file here.
	# http://intweb/help/webdocs/header-template
	# http://intweb/help/webdocs/header-ini.shtml

# We  make  this  here as  the  webteam  seem  quite fickle  on  this.
# Previously  there were  multiple files  which needed  changing. Here
# there's just one.

# for a reason that's too clever for me to understand
# navhead is _always_ concatenated with http://sanger.ac.uk/gfx/navigator/ 
# to make it an absolute path. So rather than just using our relative path
# we make the browser really do some work...
	touch header.ini
	chmod 644 header.ini
	cat > header.ini <<EOF
# Auto generated by $0. Do not edit!
[general]

title=ZMap - Development Site

description=ZMap is a database independent, stand alone replacement for the FMap sequence annotation component of Acedb

keywords=Sanger Institute sequence annotation viewer GTK multithreaded informatics bioinformatics

navhead=../../Software/analysis/ZMap/gfx/zmap_logo.png

author=zmap

# navigator 2 section
[navigator2]

Include1=<<INC
<span class="barhead">ZMap</span>
INC

Home=/Software/analysis/ZMap/

Download=/Software/analysis/ZMap/download.shtml
# now look for $PARENT_INI_STUB in $1
EOF

live_subdirs=$(find . -mindepth 2 -maxdepth 2 -name $PARENT_INI_STUB -type f)

zmap_message_out $live_subdirs

for subdir in $live_subdirs;
  do
  echo "# including $subdir" >> header.ini
  cat $subdir >> header.ini
  echo "# finished inclusion" >> header.ini
done

cat >> header.ini <<EOF
# continuing

Contact=mailto:zmap@sanger.ac.uk


EOF

for subdir in $live_subdirs;
  do
  subdir=$(dirname $subdir)
  _make_header_ini $subdir
done


not_live_subdirs=$(find . -mindepth 1 -name $THIS_INI_STUB -type f | \
    perl -wlne 'my $c = $_ =~ tr |/|/|; print "$c $_"' | sort -u | \
    perl -wlane 'print $F[1]')

for subdir in $not_live_subdirs;
  do
  subdir=$(dirname $subdir)
  _make_header_ini_from_this_only $subdir
done



zmap_cd $save_dir

zmap_message_out "Finished make_header_ini [$1]"
    fi
}


# Usage:
function process_release_notes_files_for_web
{
    if [ "x$1" != "x" ]; then
	webroot=$1
	prefix=$ZMAP_RELEASE_FILE_PREFIX
	suffix=$ZMAP_RELEASE_FILE_SUFFIX

	[ "x$prefix" != "x" ] || prefix=release_notes
	[ "x$suffix" != "x" ] || suffix=shtml

	rel_save_dir=$(pwd)
	
	rel_notes_dir=$(find $webroot -name $ZMAP_RELEASE_NOTES_TIMESTAMP | grep -v CVS | head -1)
	rel_notes_dir=$(dirname $rel_notes_dir)
	
	zmap_cd $rel_notes_dir

	hash_dir=hash_on_year_month

	zmap_message_out "Making hash directory $hash_dir"

	mkdir -p $hash_dir || zmap_message_exit "Failed making hash dir"

	for file in $(find . -name "$prefix.*.$suffix" -type f);
	  do
	  full_path=$file
	  file=$(basename $file .$suffix)
	  file=$(echo $file | sed "s/$prefix\.//")
	  file=$(echo $file | tr '_' '/')
	  
	  yyyy=$(date --date=$file "+%Y")
	  mm=$(date --date=$file "+%m")
	  
	  mkdir -p $hash_dir/$yyyy/$mm || zmap_message_exit "Failed making $yyyy/$mm dirs"
	  
	  zmap_message_out "copying $full_path to $hash_dir/$yyyy/$mm/"
	  
	  cp $full_path $hash_dir/$yyyy/$mm/ || zmap_message_exit "Failed copying..."
	done
	
	cat > index.shtml <<EOF
<!-- Auto generated by $0. Do not edit! -->
<!--#set  var="banner" value="Release notes/ChangeLogs"-->
<!--#include virtual="/perl/header"-->

EOF

	for yyyy in `find $hash_dir -mindepth 1 -maxdepth 1 -type d | sort -r`;
	  do
	  yyyy=$(basename $yyyy)
	  cat >> index.shtml<<EOF
<fieldset>
<legend>$yyyy</legend>
<ul>
EOF
	  for mm in `find $hash_dir/$yyyy -mindepth 1 -maxdepth 1 -type d | sort -r`;
	    do
	    mm=$(basename $mm)
	    month=$(date --date=$yyyy/$mm/01 "+%b")
	    cat >> index.shtml <<EOF
<li><span>$month</span>
<ul>
EOF
	    for release in `find $hash_dir/$yyyy/$mm -mindepth 1 -maxdepth 1 -type f | sort -r`;
	      do
	      non_release=$(grep -i 'non-release' $release)
	      release=$(basename $release)
	      file=$(basename $release .$suffix)
	      file=$(echo $file | sed "s/$prefix\.//")
	      file=$(echo $file | tr '_' '/')
	      human=$(date --date=$file "+%A %e %B %Y")
	      dev_only=""
	      if [ "x$non_release" != "x" ]; then
		  dev_only=" [non-release build]"
	      fi
	      cat >> index.shtml <<EOF
<li><a href="$release">$human</a>$dev_only</li>
EOF
	    done
	    
	    cat >> index.shtml <<EOF
</ul>
EOF
	  done
	  cat >> index.shtml <<EOF
</ul>
</fieldset>
<br />
EOF

	done
	
	cat >> index.shtml <<EOF
<!--#include virtual="/perl/footer"-->
EOF

	zmap_message_out "Removing hash dir [$hash_dir]"
	
	rm -rf $hash_dir  || zmap_message_exit "Failed removing directories"
	
	zmap_cd $rel_save_dir
    fi
}

