#!/bin/bash
#
# Runs entire build/checkout on various machines.
#

#
# main routine
#

# set up common functions.
. ZBfunctions $0

# Setting this variable means fatal messages also get mailed to the zmap developers
# mail alias.
ZBmailOnExit="true"


# set up usage strings.
cmdstring='[-v -r -u -m <machine> -I] <target_build_directory>'
descstring='
   -I   initialise the directory (rm -rf target, cvs co) also makes the docs

   -v   do the build replacing target_build_directory name with "ZMap.<version>.BUILD"

   -r   increment the code "release" level and then cvs tag the code before doing the build
        with tag "RELEASE_<version>"

   -u   increment the code "update" level and then cvs tag the code before doing the build
        with tag "RELEASE_<version>"

   -m <machine>
        specify the machine to ssh in to.   

   <target_build_directory> 
        specifies the sub directory of "~acedb/ZMap/builds" where the checkout
         and build should take place.'


machine="DESPOT"
zmaproot=~acedb/ZMap
builddir="$zmaproot/BUILDS"
zmapcvstarget='ZMap'
version=""
tag=""
initialise=""


while getopts ":ruvm:I" opt ; do
  case $opt in
    r  ) tag="release"    ;;
    u  ) tag="update"     ;;
    v  ) version="true"    ;;
    m  ) machine=$OPTARG   ;;
    I  ) initialise="true" ;; 
    \? ) ZBusage "$cmdstring" "$descstring" "Bad command line flag"
  esac
done


# Get the source directory for the build.
shift $(($OPTIND - 1))
if [ -z "$1" ] ; then
  ZBusage "$cmdstring" "$descstring" "No target build directory specified."
fi
targetdir=$1


# Now we've got everything signal that the build has started.
#
ZBlogmsg "ZMap build started"

ZBlogmsg "building on machine '$machine'"



#
# move to the generic build directory and do a cvs checkout of the source
#

ZBGotoDir $builddir

if [ -n "$initialise" ] ; then

  # remove the previous source tree and checkout the latest.
  # clean up only if -C set so we can NOT lose the builds we do first time round!
  if [ -d $targetdir ] ; then

    rm -rf $targetdir || ZBmsgAndExit "Cannot remove contents of ZMap build directory: $targetdir"
  fi

  mkdir $targetdir || ZBmsgAndExit "Cannot make ZMap build directory: $targetdir"

  ZBGotoDir $targetdir

  cvs checkout $zmapcvstarget || ZBmsgAndExit "Cannot cvs checkout: $zmapcvstarget"

else
  ZBGotoDir $targetdir
fi

cvscopy="$builddir/$targetdir"



# If a cvs tag of release is required then do it.
#
if [ -n "$tag" ] ; then

#  ZBGotoDir $builddir

  versioner -path $targetdir/ZMap/src/include/ZMap/ -$tag -cvs || ZBmsgAndExit "Could not cvs tag zmap files"

fi




#
# do the builds on the different machines via ssh....
#

cvsbuilddir='ZMap/src'

ZBGotoDir $cvsbuilddir

abspath=`pwd`
vpathdir=`ssh $machine "zmapvpathdir"`
# NOTE THAT CURRENTLY THE BUILD MUST ALL BE DONE ON THE SAME MACHINE OTHERWISE NONE
# OF THE CONFIG STUFF IS SET UP CORRECTLY....

# This will be ssh'd in the final version...on different machines....
# and we may not wish to exit, just report the failure....
# -b and -c get the bootstrap and config run, we may be able to do the bootstrap
# as a one time operation like the cvs stuff...
# This should be ssh $machine "zmapmake -b -c $abspath -d $vpathdir"
if [ -n "$initialise" ] ; then
  ssh $machine "zmapmake -b -c $abspath" || ZBmsgAndExit "zmap make failed on $machine"
else
  ssh $machine "zmapmake -c $abspath" || ZBmsgAndExit "zmap make failed on $machine"
fi

# making docs only works on linux at the moment as we need doxygen executables.
#
if [ -n "$initialise" ] ; then
  ssh $machine "zmapmake -t docs $abspath/$vpathdir" || ZBmsgAndExit "zmap make of docs failed"

  docdir="$cvscopy/ZMap/doc"
  ssh $machine "cd $docdir ; makeQuadList TODO"

  # Copy docs onto Sanger web dev site
  #
  ssh $machine "zmapupdateweb $cvscopy/ZMap" || ZBmsgAndExit "Could not copy docs to development web site."
fi



# If release directory needs to be given a proper release name then do so...
#
if [ -n "$version" ] ; then

  ZBGotoDir $builddir

  version=`versioner -path $targetdir/ZMap/src/include/ZMap/ -show -V -quiet` || ZBmsgAndExit "Could not get zmap version"

  mv $targetdir 'ZMap.'$version'.BUILD' || ZBmsgAndExit "Could not rename build directory"
fi



# Record end of build.
#
ZBmsgInfo "Build completed successfully on machine '$machine'."

ZBlogmsg "ZMap build finished"


exit 0
