<!-- $Id: canvas_tweaks.html,v 1.4 2011-04-07 09:54:53 mh17 Exp $ -->

<h2>Speeding up the use of the Foo Canvas</h2>

<h2>Basic Features made simple again</h2>
<h3>The problem: Basic features have been made complex</h3>
<p>
All ZMapWindowCanvasItems are currently FooCanvasGroups and contain lists of features for background, underlay, feature, and overlay and changing these to be simple FooCanvasItems may offer a significant performance improvement and simplify a lot of code and free up a lot of memory.  The initial display of ZMap is dominated by alignments (eg SwissProt and TrEMBL) which typically contain 90% of all features on display.
</p>

<h3>Complexity is implemented but not used</h3>
<p>Inspection of the code reveals that the four lists of canvas items in a ZMapWindowCanvasItem have been programmed but are not used, or are used incorrectly.  Existing use of these lists can be found by searching for <b>zmapWindowContainerGetOverlay()</b>, <b>zmapWindowContainerGetUnderlay()</b> or <b>WINDOW_ITEM_UNDERLAY</b>, <b>WINDOW_ITEM_OVERLAY</b> etc.
<ul>
<li><b>zMapWindowCanvasItemMark()</b> draws a rectangle on the ZMapWindowCanvasItem's overlay but this would be better drawn on the block as this would be consistent with a non-item based mark. Possibly the column constainer might be better as this would cope with hide/display column better.
<li> <b>zmapWindowTranscriptFeature.c</b> has code to draw a Locus name in the transcript canvas items' overlay but this code is never run as it is controlled by a gboolean set to FALSE.
<li> transcripts have been presented as the cardinal example of a type of feature that would benefit from complex treatment, but the exons and introns are all drawn on the Features list.  A single sorted list of display items would provide the same function.
<li> alignments reference the underlay list when switching between gapped and ungapped display.  It's not very clear whether or not this data is actually used - data is moved to a 'no_gaps_hidden_item' and the underlay appears to be used as a 'temp_parent' which looks suspiciously like a hack.
<li> Text Items use the underlay for the background highlight and this could just as easily be held in the features list.  Text features appear to be expected to include most kinds of foo-canvas-items such as lines, rectangle, glyphs, text.  Why is not clear, as the navigator (which has text and lines associated) displays these as separate items.  DNA and peptide highlights could be implemented in the container (if not done so already)
<li> All items have a single foo_canvas_rect in the background 'list'.   It's actually a foo_canvas_item instead of a foo_canvas_group like the underlay, overlay etc.   Note that the normal feature FooCanvasItems are held in the FooCanvasGroup item list. and the existing FooCanvasGroup methods can be used to find the bounding rectangle of an item.  Underlay and overlay appear not to affect the background size.
</ul>
</p>
<h3>Removing Canvas Item backgrounds </h3>
<p>This looked like an easy way to gain speed as it doubles the number of FooCanvasItems, but implementation reveals no difference in performance.
</p>

<h3>Caveats</h3>
<h4>Complexity is not used? </h4>
<p>Despite each basic feature consisting of several lists of canvas items these lists are empty and may not cause a significant delay.
</p>
<h4>Side effects</h4>
<p>When alignments get bumped their x-coordinate is changed and extra lines and glyphs are drawn on the canvas.  Use of the complex ZMapWindowCanvasItem structure may be necessary to do this.
</p>

<a name="underlay"></a>
<h3>Some notes about the Item factory and the CanvasItem Underlay list</h3>

<h4>Underlay is coded as a hack for alignment features but never used</h4>
<p>This is not immediately obvious.  In <b>zMapWindowAlignmentFeature.c</b> the functions <b>zmap_window_alignment_feature_clear()</b>, <b>zMapWindowAlignmentFeatureGappedDisplay()</b> and <b>zMapWindowAlignmentFeatureUngappedDisplay()</b> operate three different flags to control the used of a local <b>no_gaps_hidden_item</b> canvas item, the intention presumably being to hide an ungapped feature while displaying a gapped alignment.  The last one of these uses the [WINDOW_ITEM_UNDERLAY] list as a temporary parent for the item to be removed from display but can never be called as the flag controlling access to this function (<b>alignment->flags.gapped_display</b>) is never set. Note that this code assumes that the underlay list is not used because if it was run it would remove anything in in this list from display.
</p>
<h4>Alignment features implement a class clear function and the Item Factory references it but it is never called and Transcript features do not implement this function which is still referenced by the Item factory.</h4>
<p><b>zmapWindowFToIFactoryRunSingle()</b> takes an argument FooCanvasItem 'current_item' which is always NULL.  This is passed via the run_data structure to the function in the mdule that create and draw canvas items.  In the alignment and transcript functions this current_item is tested and if non NULL (ie never) then the clear function is called.
</p>

<h4>Text Features and the Underlay list</h4>
<p><b>zmapWindowTextFeature.c</b> references the WINDOW_ITEM_UNDERLAY list twice but removing these has no effect as the second one adds a line to 'mark the real extent' but this is controlled by a FALSE flag and never run.  The first reference sets the background colour and appears to do nothing not already done by other code.</p>

<h4>Other use of the Underlay and Overlay lists</h4>
<p>Scanning for references to this data either via the CanvasItem data structure or the access functions reveal very little use:
<ul>
<li> zmapWindowItemDebug.c prints them out if defined
<li> zmapWindowTranscriptFeature.c references the overlay list three times but this code is never run.
<li> zmapWindowCanvasItemMark() adds a rectangle to the overlay list.  This could be added to the end of the items list, or the container column (which has a group overlay list). The corresponding Unmark function removes the rectangle but does not reference the list directly.  It's not clear how this can be done without leaving a pointer dangling.
</ul>

<h3>Removing canvas item background underlay and overlay: what's the difference?</h3>
<p>No noticable difference in performance has been observed, which is strange, as every canvas item had a background foo canvas item - the amount of data on the canvas should have been halved.
</p>

<h3>Implementation</h3>
<h4>General comments about existing data and code</h4>
<p>
<ul>
<li> Currently all ZMap canvas items are constructed by inheriting foo_canvas_item (actually foo_canvas_group) and we have to preserve this as the item factory code works by creating a foo_canvas_item which is actually a derived object but referenced as a foo_canvas_item.
<li> We cannot use foo_canvas_items directly as we must also have a pointer to the relevant feature in the feature context.
<li>There are 25 instances in the source of ZMAP_IS_CANVAS_ITEM() which implies that we may be forced to have a base ZMapCanvasItem class with simple features and groups derived from it.  25 is not very many so modifying the code for this will be simple, and we can handle adding items  and groups as distinct class hierachies if necessary.
<li> the existing ZMapCanvasItem class is misnamed as it is really a canvas group, which is a shame as this means we have to edit 283 lines of code to use meaningful names.
<li> zmapWindowItemFactory.c contains functions to draw all types of ZMapCanvasItem and these all call zMapWindowCanvasItemAddInterval() which calls a class function to add a foo canvas item (or more) to the base class, so the interface is fairly modular and can be changed relatively easily.
</ul>
</p>
<h4>Canvas Item Class Structure</h4>
<p>Due to the technicalities of object instantiation in GLib it's not practical to derive groups and simple items from a single base class.  However as foo_canvas_group derives from foo_canvas_item they will all derive from foo_canvas_item so we do have a single base class at the bottom.  Note that we cannot have simple canvas items derived from foo_canvas_group and just not use the group data as the foo canvas code treats groups differently from items.
</p>
<p>
A simple canvas item (eg basic feature or ungapped alignment) will derive from a foo_canvas_item and have no additional lists of features.
<pre>
ZMapWindowCanvasItem    (contains ->feature, ->item_type)
    foo_canvas_item
</pre>
</p>

<p>
A complex canvas item (eg transcript, gapped alignment)  will derive from a foo_canvas_group (which derives from a foo_canvas_item) and will have a single list of subfeatures, rather than four as at present.  Note that this implies complex features may interleave on the display, but this is not thought to be an issue as transcripts are normally bumped as no overlap and alignments are only displayed complexly (eg with glyphs and colinear lines) when bumped.
<pre>
ZMapWindowCanvasGroup (contains ->feature, ->item_type, ->item_list)
  foo_canvas_group
    foo_canvas_item
</pre>
The item_list is a list of foo_canvas_items.
</p>

<p>The different types of ZMap canvas item (eg basic feature, transcript_feature) will derive from either ZMapWindowCanvasItem or zmapWindowCanvasGroup.  Note that alignments displayed as ungapped will be ZMapWindowCanvasItem and gapped as ZMapWindowCanvasGroup.
</p>

<h4>Container Classes</h4>
<p>These will derive from ZMapWindowContainerGroup as at present.  This derives from foo_canvas_group and contains a list of canvas items which in this case contains four foo_canvas_groups for the background, underlay, features, and overlay.  Some remarks in passing:
<ul>
<li> Mostly these groups in the items list will be empty and perhaps the code could be optimised by deriving from ZMapWindowCanvasGroup and using the item_type field.  There are access functions for each of these, so we could scan the short list and return NULL if not found.
<li> As all containers derive from ZMapWindowContainerGroup we can display all four levels of items for aligns, strand, blocks, featureset (column), but it's not clear what use this is. Some background rectangles do get drawn and soem are added to pick up mouse events, but ordering and handling of items in foo suggests that this could get very confused.
<li>ZMapWindowContainerFeatureset has seperate lists of:
<pre>
  GList *colinear_markers ;
  GList *incomplete_markers ;
  GList *splice_markers ;
</pre>
Are these needed?
<li> As we aim here just to make basic features into simple foo_canvas_items it would be unwise to alter any of this code.
</ul>
</p>

<h4>Operating the item factory</h4>
<p>Existing code adds canvas items by first creating a ZMapWindowCanvasItem (a foo_canvas_group) and then adding one or mor items to it via the class->add_interval function.  Necessarily for simple canvas items we will have to combine these two functions and the drawXXXFeature functions in zmapWindowItemfactory.c can be used to drive this with minimal effort.
</p>



<a name="summarise"></a>
<h2>Summarise Columns</h2>
<p>See also RT #177032, where this text orginated.</p>
<h3>Displaying invisible features slows ZMap down</h3>
<p>
Display time in ZMap is dominated by a few heavily populated columns eg Trembl may have 50k features but the majority of these features are obscured by others and cannot be seen. As operating the foo canvas takes 90% of the display time and a complete feature context can be scanned very quickly (eg 50ms to reverse complement all features, compared with 10sec to display) it may be possible to speed up this display by not adding invisible features to the canvas.  Note that due to the display format of alignments (centered rectangles) we can resonably expect to loose up to 98% of features off the display for a column like TrEMBL - if the column is 1000 pixels deep we cannot need to display more than 1000 features to give the same visual appearance.  There may still be some overlap caused by the simple scan algorithm.
</p>
<p>
This is a similar process to the idea of a summary display as to be provided by otterlace on request, but the difference is that ZMap would still have all the data and only real features will be used. The argument for having ZMap perform the necessary calculations is that ZMap knows when features become obscured at different zoom levels as it knows about pixel coordinates.
</p>
<p>
This process only applies to un-bumped columns and to implement this a column with an appropriate style parameter would be processed before display at the current zoom level.  This parameter defines the minimum zoom level at which to apply the summarising algorithm:
<pre>
[pep-align]
alignment-summarise=0.1
</pre>
</p>

<h4>Algorithm</h4>
<p>
<ul>
<li> sort the featureset into vertical order
<li> express features in canvas (pixel) coordinates (top, height, width)
<li> as features are displayed add their rectangles to a list in order of upper vertical coordinate
<li> if two rectangles next to each other have the same width combine them
<li> if a rectangle in the list is covered by the new/ combined one remove it
<li> if a rectangle covers the middle of a narrower one split the narrower rectangle into two
<li> rectangles may not overlap (strictly, including borders)
<li> when processing a feature if its width is &le; the min width of listed rectangles over the whole vertical distance do not display
<li> as features are processed remove rectangles from the list when they are out of range
</ul>

This uses little extra memory and comparisons are fairly quick as there is almost no searching involved.
Visibility is computed exactly and we can choose whether to display the items at the top or bottom of the foo canvas heap by sorting in reverse order.
</p>
<h4>Caveats</h4>
<p>
BumpCol would have to be changed to display the hidden features rather than moving thier x-coordinate. However bumping already includes adding lines and glyphs to the canvas and this should not be a significant problem.
</p>
<p>Functions such as 'List all Column Features' may have to be reviewed if they feed off the canvas data - perhaps some speed gains can be made by drawing features as hidden. (tests show about a 20-25% improvement by hiding all features.
</p>
<p> Displaying several featuresets in one column is more complicated especially when we consider that the summarise option is selected by a featureset's style.  It is possible so specify a style for a column and this perhaps provides some resolution despite allowing for mis-configuration.
However the intention was to speed up the display of featuresets like TrEmbl and SwissProt which normally appear in a column of thier own   It may not be worth implementing a complex way of combining featuresets like this, better to specify what happens if this is configured.  As a short term measure we will choose to summarise each featureset in a column independantly.
</p>
<h3>Implementation</h3>
<h4>Module and scope</h4>
<p>This will be a new module <b>zmapWindowContainerSummarise.c</b> and will operate on a ZMapWindowContainerFeatureSet, which may contain more than one featureset from the feature context.
</p>
<p>Note that in a view (which contains the feature context) if there are multiple windows open these are not constrained to be at the same zoom level (although you do have to unlock them first) and therefore it is not appropriate to maintain any flags in the feature context relating to this - all state information must be at the level of ZMapWindowCanvasItems.
</p>
<h4>Choosing featuresets and when</h4>
<p>Styles will be used to control whether or not to not display features.  This implies that it will be possible to select individual featuresets within a column for summarising.   Logically we could summarise columns other than alignments but as there are only two columns thought to be relevant (and they include only one featureset each) this will be phrased as an alignment mode option.  GF-splice glyphs look like another good candidate but as they are not rectangular features would require special code.
</p>
<p>We can also specify a minimum zoom level to do this at and avoid pointless computation.
</p>
<h4>Where to attach the filter</h4>
<p>We need to have access to canvas coordinates and this implies that we need to home in on the ItemFactory where these are calculated. In <b>zMapWinfowItemFactoryRunSingle()</b> a function  ((method)->method)() is called for each type of feature which creates and draws the ZMapWindowCanvasItem and when this is called the x and y coordinates have been calculated and adjusted for score if configured, but are in real world coordinates.  The foo canvas provides a function to convert called <b>foo_canvas_w2c()</b>.
</p>
<p>Filtering calls round this 'method. will allow us a single point of control and provides a clean interface to the rest of the code. There are futher offsets calculated later but as we need feature relative coordinates this is not relevant.
</p>
<h4>Data structures used</h4>
<p>We will use a simple linked list of reactangle structures and these will be freed at the earliest opportunity.  None of this has any permanence at all, although it will be held in the Window for use by callbacks.

<h2>Results</h2>
<p>After implementing the filtering algorithm as above we can see a big reduction in objects drawn and time used:
<table border="1" cellpadding="3" cellspacing="3">
<tbody><tr>
<th>FeatureSet</th><th>Features drawn</th><th>Total features</th> <th>Max list size<th>Time used</th><th>Previous Time </th><th>Ratio</th></tr>
<tr><td>TrEMBL</td> <td>722</td> <td>28922</td><td>4</td> <td>0.206sec</td> <td>4.865sec</td> <td>23.6</td></tr>
<tr><td>SwissProt</td> <td>554</td> <td>9563</td> <td>3</td><td>0.125sec</td> <td>1.606sec</td> <td>12.8</td></tr>
</tbody></table>
Given that the list of covered regions stays very short there seems little point in combining these as originally planned.  The reduction in time is a little dissappointing - it is related quite directly to the number of items drawn (1/40 for TrEMBL).  There may be further gains to be made by implementing a radix sort - with 200k features this would run 18 times as fast.  A lower limit will be the time needed to draw 1000 features.  As the summarise algorithm is not optimal the number of featuress draw could be reduced by running the summarise algorithm in reverse order on the summarised data.
</p>
<h3>Some caveats</h3>
<p>This has so far been an experiment and there are some issues that need to be resolved:
<ul>
<li> some ZMap functions such as list features in column may need to be adjusted to reference the feature context rather than the canvas. Tests reveal that 'List all Column Features' uses the FToI hash and thereby only finds features displayed on the canvas; perhaps this can be fixed by adding null entries to the hash when items are not displayed, and creating a fake canvas item OTF (or displaying the feature) if necessary (eg if the hash is used to look up a specific feature).
<li> zoom appears to operate without doing a re-draw and this code needs to be adjusted to add or remove features to the canvas. The function zmapWindowDraw.c/preZoomCB() looks like a good place to do this. Note that if we are to have significant performance improvements we cannot display more than a few screens worth of data at high zoom and instead draw on demand, which implies limiting the scroll region more than at present, at least for summarised columns.
<li> bump column must draw the missing features
</ul>
These imply some performance overhead, although not as great as drawing the whole column in the first place.
</p>



<h2>Removing canvas items altogether</h2>
<h3>Where is the performance problem?</h3>
<p>Even with 200k features it should be possible to display relatively quickly and perhaps there are delays introduced by interaction with the X server which has a complex protocol involving map realize update and expose events.  We have a tree of canvas groups to the column level which consists of no more than a few hundred groups total and this can certainly be processed very quickly. All we have to do is cause GdkDraw functions to be called and mouse events linked to specific features and this can be handled by ZMap without reference to the foo canvas directly.
</p>

