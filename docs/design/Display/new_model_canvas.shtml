<h2>New Model Canvas</h2>
<p>An attempt to speed things up a bit.  <i>Note</i> that here 'new model' refers more to Oliver Cromwell than MVC, although it is one of the design aims to make the view and window have less model and more view.
</p>
<p>This design follows an initial experiment with coverage displays which involved creating a single ZMapWindowCanvasItem (foo canvas group) containing a single ZMapWindowGraphDensityItem (foo canvas item) for each featureset.  Features were represented by simple data structure accessed by a skip list from the ZMapWindowGraphDensityItem and were not added directly to the foo canvas.  Expose events were handled by calling GDK functions for the relevant feature structures.
</p>
<p>This initial experiment relates to handling the foo canvas at a level below the column objects and the new model canvas is to be implemented first by replacing data and code at that level and then by revisiting the container design but for clarity here we present a top down discussion from canvas root to indivudual sub-feature.
</p>

<h4>Problems being addressed</h4>
<p>Code and data is quite complex and gains little - each feature on display is 10 levels deep in the Foo Canvas and positioning features in the screen is a complex process that is prone to error.
</p>

<p>There is a lot of ZMapCanvas code that does not take advantage of object oriented or plain old structured programming patterns amd this can be improved significantly.
</p>

<p>Adding features to the canvas is a time consuming process that also involves some complex interactions with X.  The Foo Canvas is not designed to handle the number of features displayed by ZMap.
</p>
<h4>Some design aims</h4>
<p>
<ul>
<li> common functions are handled by a base class. these include data structuring (operating the skip list), memory allocation, searching (for items to display), foo canvas interfaces such as point() and bounds().
<li> a unified interface to allow print/ screen dump will be provided
<li> consrtuction and handling of composite objects (eg transcripts and alignments) use common code
<li> compound objects (transcripts, alignments) and thier sub-parts can be acessed by a uniform interface
<li> small code size
<li> view unlinked from model
<li> much more rapid paint
</ul>
</p>


<h3>Canvas Block and Column container:foo canvas group</h3>
<p>
This will be simplified to look like the diagram below.  The feature context will remain as is with potentially many blocks and more than one align, although with present use we are restricted to a single block. If more than one block is implemented in future this will be done via a separate pane on display (a ZMapWindow with its own canvas) for each block, and different alignments can be locked together or otherwise.
</p>

<p>Within a block there will be no strand containers but instead we will add ZMapWindowColumn groups directly to the block. Reverse and forward strand columns and the strand separator will be identified by strand explicitly and will be positioned by using the existing columns sorting code, tweaked as necessary.
</p>
<p>
Each container will hold data to specify strand and frame and also borders if any.
</p>
<p>As the number of columns is not very great (typically less than 100) these can be stored in a simple linked list.
</p>

<img src="new_model_canvas.png"  class="img">

<h4>Canvas coordinates</h4>
<p>The feature context has coordinates specified as forward strand chromosome based from 1 (although the segment viewed is unlikely to be).  In a block these coordinates will map to zero based canvas coordinates, with the first base in the viewed sequence mapping to 0.0.
</p>
<p>Note that currently reverse complement operates on the feature context which is then re-displayed.
</p>


<h3>Canvas Featureset container:foo canvas item</h3>
<p>A canvas column contains a set of features that the user can request and show/hide and this may include data from several sources.  (But note that the user interacts with one or both strands together depending on circumstances). Examples include Repeats, Uniprot (= Swissprot + TrEMBL) ext_curated (~400 potential sources), BAM paired reads (experimental repeats etc).    The column foo canvas group implements the overall layout and positioning of features in the window and within that we have  foo canvas items that implement the display of features (canvas featuresets).
</p>
<p> A canvas featureset is not the same as a context featureset in that is is used to organise the presentation of features to the user wherease a context featureset is simply a collection of features of the same type which can be displayed in several colums eg via strand and frame (the data model).
</p>
<p>A canvas featureset may contain data from several sources (context featureset) and may contain a subset of the data from its context featuresets (eg reverse strand only)
</p>
<p>A canvas column may contain one or more canvas featuresets.  This is especially relevant to the handling of coverage data comapred with simple features - to display several heatmap featuresets side by side and interact with them distinctly we need to store these as separate data structures.  Converserly, when we combine several sources into one mixed column, to handle display and selection events we need to have these held in the same data structure.
</p>

<p>This leads to a design as below, where we map source data (context featuresets) into containers (canvas featuresets).
</p>

<img src="new_model_fset.png"  class="img">

<p>Following experiments with coverage displays and graph features it looks feasable to code each featureset as a single foo canvas item and to have this item handle expose events and display individual features.  This means that what were Foo Canvas Items (and ZMapWindowCanvasItems) become simple data structures, and performance improvements of 5x on add and 3x on paint are achievable.
</p>

<p>It is intended to implement the 'featureset summarise' function within a canvas featureset, allowing this to be switched on without breaking assumptions made by other parts of ZMap. Note that due to structreing options outlined above we can operate this code on single context featuresets or combinations of these.
</p>

<h3>Canvas features: data structures internal to canvas featureset foo canvas items</h3>
<p>
Each featureset item is a class which handles display etc for indiviudual features. A data structure is used by the class to describe each displayed feature and this refers back to the feature context.  The exsiting FToI hash can be used to find a canvas items from a context feature or key, but has to be modified to return the feature as well as the canvas item as these canvas items are composite structures.
</p>

<h4>Expose events</h4>
<p>The primary function of the canvas featureset object is to display features and this is to be handled efficienly by the use of a skip list.  features are added to a canvas featureset via the ItemFactory as at present and on display the skip list is created by sorting the list of features and generating extra latyers of pointers via a single pass.  As this data is static we can be assured of a non degenerate structure.  Where several context featuresets are added to a canvas featureset we just re-create the skip list each time - compared with the computation requried in total re-creating the skip list is not an issue.
</p>
<p>Other than the initial display where the whole loaded sequence is visible ZMap normally operates zoomed in and expose events are only revelant to small sub-sequences.  The skip list allows access to the start coordinate of an expose region in nominally O(log n) time and the processing the bottom level of the list serially till we reach the end is as efficient as we can get (O(1))
</p>


<h4>Compound objects</h4>
<p>A simple object (eg basic feature, glyph) corresponds to a single GDK item and each one is unrelated to the others.  They are accessed via thier featureset's skip list.
</p>
<p>A compound object is a set of simple objects and each of these are accessed via their featureset's skip list in exactly the same way as simple objects.  However these have left and right pointers to other parts of the same compound object which may be some distance away and other compound objects may appear in the gap between.  An alignment and a transcript may be represented by similar structures - alignments may have extra data to handle gaps.  If a user selects a compund object it is a trivial matter to find all  the parts eg for highlighting.
</p>
<p>Left and right links between parts of a compound object will be created as features are added to a canvas featureset.  Either this can be done by another sorting phase or via the FtoI hash functions (for alignments) or via an extra function provided by a child class (for transcripts). It may be convenient to set up composited alignments in the feature context while doing this, or to implement VULGAR strings and treat alignments like transcripts.
</p>
<h5>Implementation - discussion</h5>
<p>Initially basic features will be implemented and then extended to unclude alignments - these for the bulk of the data handled by ZMap and give the greatest performance gains.  There are some issues to face here beyond what may need to be done for transcripts, as transcripts already have some structure in the feature context (a wild guess) whereas alignments are linked by a 'same name' relationship and no data structuring exists.
</p>
<p>To implement alignments in the CanvasFeatureset we will not make any changes to the feature context - this is to localise effort and avoid unraveling large amounts of code with no clear boundaries.  The existing interface is by feature not featureset and this presents a problem in that retro fitting same-name links in the CanvasFeatureset naively would involve a double lookup for each one - first via the FtoIhash and then the Canvasfeatureset skip list.
Conversely pre-sorting the data and adding in same-name order to allow effcient operation requires external coding.
</p>
<p>An obvious strategy would be to sort by name before creating the skip list, add the links and then sort by sequence coordinate.as at present.  This is practical enough but requires careful coding if features are added later. (NOTE: handling addition and deletion of features need to be specified clearly regardless).
</p>
<p>A further consideration is that different type of feature can be mapped into one CanvasFeatureset and we need to trigger sideways links only when appropriate, or accept the performance overhead of the extra sort and scan.
</p>
<h5>Implementation - summarised</h5>
<p>
<ul>
<li> the feature context will not be changed or affected
<li> the interface between feature context, zmapView, and CanvasFeatuerset will be unchanged and new code handled via the ItemFactory
<li> if any alignment feature is added to a CanvasFeatureset then same-name links will be added before creating the skip list display index.
<li> add and delete feature from a CanvasFeatureset will require recalculation of all sideways links (as for rhe display index as at present). Note that in current use we expect multiple featuresets to be added to a CanvasFeatureset (requirng large amounts of data to be processed) or individual features to be added to an OTF column (small amounts of data) and this choice does not present a major performance bottleneck unrelated to data flows (eg loading a column).  The prevents obscure bugs due to multiple paths through the code and removes the requirement to specify exactly how add and delete work for individual features.
<li> after this complex feature extents can be implemented and then complex bump modes.
</ul>
</p>


<h4>Decorations</h4>
<p>Compound objects consist of a series of boxes (for example) and these may be joined up by lines and also have glyphs attached.  Depending on the display mode and the type of object the decorations may not always be displayed.
</p>
<p>For a transcript we always display a bent line between blocks and for an alignment we display traffic light lines and also glyphs if bumped.  To minimise memory use these decorations will not be represented explicity by thier own data structures but instead drawn on demand depending on the display mode.  However, some  extra data will be stored to assist in this and help rapid display:
<ul>
<li> alignments will hold flags for left and right links to specify glyphs and homology lines at each end
<li> this data will be calculated once only
</ul>
</p>

<h4>Gapped alignments</h4>
<p>Alignments are displayed either as simple boxes or as a series of boxes joined by lines (to show gaps). In the existing implementation all of these are distinct foo canvas items, which is quite inefficient.  Instead we will store each feature as is (a simple box) and when bumped or at high zoom draw the appropriate series of boxes and lines.  It will be relatively easy to trigger this according to how visible these decorations will be related to their size in pixels.
</p>
<h5>Implementing Gapped Alignment display</h5>
<p>Each alignment will be stored as a single feature and displayed as a simple box if unbumped. NOTE also that gaps are not displayed on the reverse strand.
</p>
<p>When bumped we will refer to the feature's gaps array and taking into account base and pixel sizes construct a list of gaps to draw - several may overlap a single pixel at low zoom.  The feature actually stores the bases that are aligned not the gaps and each one corresponds to a box for display; at high zoom these are joined by a black co-linear line but often they overlap a single pixel.  To produce an efficient paint we will join up blocks if they are separated by one pixel, and add horizontal lines afterwards.  If a gap is bigger than one pixel then we add a vertical line after the box. On changing the zoom level we recalculate this data.
</p>

</p>

<h4> Summary</h4>
<p>Thus we have a design for feature data structures that looks like the diagram below, where the green exons form a complete transcript object (a similar structure will be used for alignments).  We can select of search for sub-parts of compound objects and are at choice whether or not we wish to access the part of the whole, and the process for each is simple and well defined. Each compound object is a linked list of sub-parts and the start and end correspond to the start and end of the list. Each sub-part refers back to the feature context.  Note that in the canvas there is no data structure corresponding to the whole transcript; it is just a sum of parts.
</p>
<img src="new_model_feature.png"  class="img">


<h4>Bumping simple and compound objects</h4>
<p>Other than bump-style all bump modes simply specify how to arrange features in the column and compound objects are simply fed into this code as simple objects covering the whole range.  (NOTE that no extra data structures are created).  Bumping is done a) by adjusting the X coordinate of each feature and b) adding decorations.  Unlike the existing canvas we do not add any new data structures for decorations but simply paint on demand.  Two X coordinates will be stored for each feature: 1) for unbumped) and 2) for the current selected bump mode and the appropriate one used by the GDK code.
</p>
<p>We wish to avoid mulitple scans and sorts for bumping componud objects and the following strategy will be used:
<ul>
<li> compound objects will be linked sideways as in the diagram above
<li> features to be bumped will be processed in start coordinate order; by definition linked objects cannot overlap
<li> a compound object will be bumped according to its total extent
<li> when the first part of a compound object is bumped all other parts will be bumped at the same time
<li> when scanned subsequently the subsequent parts will be ignored as they all have a valid -&gt;left pointer
</ul>
This gives a single linear scan: all features are processed (bumped) once only, although many are accessed four times viz: 1) - main loop, 2) get extent, 3) bump, 4) skip.
</p>
<h5>Featureset and column combinations</h5>
<p>There are conflicting requirements regarding columns with multiple featuresets. For graph mode displays (eg coverage heatmaps) it is essential to have each featurset displayed separately and the features for each one aceessed by a different skip list, yet for other types of feature (eg repeats) we have several featuresets that we want to display intermingled and this requires a skip list for the column not each featureset.  This can be handled by providing a virtual featureset for the column and mapping each real featurset to this, triggering  (initially) off style mode, although a separate style attribute can easily be created if necessary.
</p>

<h5>Handling expose events for bumped columns</h5>
<p> Initial experiments with coverage displays have worked by adding a single canvas item for each featureset which has a width defined by the style and a height corresponding to the whole sequence. Clipping has not been coded for high zoom as we only paint objects within the scroll region.  X coordinates have been ignored as there has been little benefit.
</p>
<p>For a bumped alignment column we have significant X coordinates and need to ensure that expose events are handled efficiently.
Displayable objects are found using a skip list which is sorted by Y coordinate and this provides effective selection of the vertical region of interest.  Features within that region are scanned from the top downwards and we can simply ignore features that lie left or right of the expose area.
</p>
<p>If we take as a reasonable worst case a protein alignment column with 200k features that is bumped without setting the mark and also that the bumped display is 200 features wide, and we are at minimun zoom and we expose one column of the bumped data then the overhead of scanning the X coordinates is 199k feature comparisons and list links.  This can be measured quite easily, and for 100k features we have 4ms user time to run a test program, increasing this to 1000k gives 8ms.  4ms is required to run the test program with no data - this implies that 250k comparisons take approx 1ms user time.
</p>
<p>Therefore the overhead is minimal and naive code can be used.</p>

<h5>Handling bumped feature decorations</h5>
<p>Tradtionally co-linear lines and glyphs have been added to same-name features (or rather to the container) as discrete foo canvas items and these get painted as normal canvas items.  On un-bump they are removed from the canvas.
</p>
<p>To acheive a faster performance we would like to simply paint the existing features as bumped and then add the decorations as part of the normal paint function for the features.  This is relatively simple at first glance - the type of decorations needed can be calculated on demand and switched on as required.  It is a simple task to draw a line from one feature to the next, but scroll events cause expose events that do not pick up the decorations as they extend beyond the bounds of the original features.  It is relatively simple to add a 'canvas extent' for features and catch paint events downstream, but extending a feature upstream could result in the index no longer being sorted.
Note also that if we also try to paint lines upstream of a feature this will not be effective, as we may expose an area between each one and have no reason to paint anything.
</p>
<p>Clearly as colinear lines can extend large distances we wish to avoid the paint overhead when un-bumped and have to set the extent whenever the bump mode is changed.
</p>
<p>We also have to change the featureset overlap distance to pick up upstream features.  Note that although this gives a significant performance overhead it does so because we actually want to paint all those features, and this cannot be avoided.
</p>
<p>Glyphs may be slightly tricky to add on as we have to calculate the maximum size of a glyph to define the extra overlap distance.
</p>
<p> The root cause of these problems is that we are dealing with feature parts and we need to display some part in the middle that we can't find on an expose.  If we could deal with alignments as composite objects then these could easily pick up any relevant expose event.

<a name="bump_solution"></a>
<h6>Attempting a solution</h6>
<p>
<ul>
<li> <i>Keep the generic featureset code simple</i><br />
Using a sorted index to find features to display for a given expose event is a simple idea and works well and it is worth preserving this for other kinds of feature.

<li> <i>Handle colinear lines in the first alignment in a series</i><br />
The initial implementation added one line per feature but this has proved tricky.  If we adjust the first feature's extent to cover the whole series and make its paint function draw all colinear lines for the series and it's own feature, then we are guaranteed to pick up all the expose events.  As we bump each series of features together it is easy to calculate the total extent and also to maintain a featureset wide bump overlap limit.  Note that this is stricly a downstream extension of the feature extent and avoids problems with re-ordering the index.  2nd and subsequent features will paint themselves.  We also avoid adding an alignment wide feature just for decorations - this disturbed the index and added extra complexity at the cost of adjusting one coordinate.

<li> <i>Handle glyphs via a separate bump overlap range.</i><br />
These can occur between features (nc-splice) in which case they are handled as above. They can also occur at the start and end of a series and extend beyond these bounds. As the exisitng overlap mechanism will pick up expose events for the top end we need no concern ourselfves with that. The bottom end however requires further processing of features beyond the expose region to pick up features just beyond it. As glyphs are defined in pixel coordinates we can calculate maximum value of these and adjust for the current zoom level in the draw function.  Glyphs will be drawn per feature, and this process can be added regardless of bump state, which will keep the code cleaner.
</ul>
Here's an pictorial repepresentation:<br />
<img src="bumped_align.png"  class="img">

<h4>Handling alignment glyphs</h4>
<p>There is a performance gain to be had by caching glyph shapes as these are all the same shape and size (but may be inverted or displayed in a different colour.  Glyphs in general can be sized by score (which can be set in the style) and we have to handle this (effciently) if someone configures it (eg as for GF_Splice glyphs as standalone features), but for bumped alignments we currently have a restricted level of variation.  This means we only need to have four data structures for each glyph style definition, but have to allow for one per feature 'just in case'.
</p>
<p>To provide a clean interface the alignment code will use a #define or function call to access a sub-feature glyph and these will be painted on demand.  These may be stored per feature (quiWe prefer to avoid large amounts of memory allocation (which saves memory as not all alignmentsck and easy but uses a lot of memory <i>NOTE: this could require 100MB for 200k alignments if pre-allocated)</i> or in a hash table
(memory efficient but a little fiddly).  The problem is to find a way to index glyphs in an effcient enough but also general way - note that we need to index an instance of a glyph not its definition.. What we are aiming at is to just have examples of each variation (max 8 per style of which we currently have 2) that works regardless of our knowledge of current use.
</p>
<p>To handle arbritary number of glyph instances we must have one glyph per features (at each end) and the only way to do this effeicently in terms of memory is via a pointer or key in the alignment struct (we wish to avoid recalculating on expose for speed).  If we can use these pointers/ keys to refer to a few glyph instnace that can be mapped to a feature's coordinated then we have an effcient solution.
</p>
<h5>A solution</h5>
<p>
<ul>
<li>On display (via lazy evaluation of bumped features) we calculate a signature for each glyph derived from the style definiton and feature data.
<li> The style defintion reveals whether or not the instance population is limited (eg not sized by score) and if not we allocate a unigue glyph struct - this will use a lot of memory but is required.
<li> If the style is limited in variablilty then the feature data (strand, farme, score/ style threshold is combined with the style data to create a signature for a cached glyph and that is created and referred to directly using pointer.
<li> Cached styles are held in a hash table indexed by signature and never freed
<li> A signature will be implemented as a GQuark derived from a string made up of the style id and various configuratioon options.
</ul>
This gives: a) efficient memory use for stable glyph styles, b) once only calculation of the glyph shape. c) rapid acess and display.  It is also relatively future proof: if we add more style otpions it is possible to add these to the glyph signature, and configuration changes will filter through transparently.
</p>
<p><b>Note</b> this code is part of the glyph implementation and not restricted to alignment features, although other types of features would have to code the interface if requried.
</p>
<p><i>A Nuance</i>: score_mode ALT displays the glyph using a different colour, and this can be implemented by the calling code easily enough, we have the options to use shorter signatures and fewer glyph instances,; however this is not hugely significant in terms of speed or memory use.
</p>

<h4>Transcripts</h4>
<h5>Compared with alignments</h5>
<p>Due to historical constraints alignments are sourced from multiple features and then linked together and in future we expect this to change, with a single cigar string and sequence for a whole series.  Transcripts appear in several lines of GFF but are assembled on input into complex features.  These then have to be added to the canvas as a series of simple features linked together.  Data volumes are much lower and they are normally viewed bumped, and there is no difference in the display format whether bumped or not.
</p>
<p>Alignments were implemented by having all decorations (such as co-linear lines) as virtual canvas items a) to handle alternate display formats without deleting and adding large amounts of data to the canvas on bumping. and b) to reduce the amount of features in the canvas.  Neither of these constraints are relevant to transcripts.
</p>
<h5>Displaying a Transcript</h5>
<p>A new feature specific function will be written to handle adding transcripts to the canvas, which will display each exon and intron as simple canvas features and ink these together via the existing left and right links.  CDS and UTR regions could be added as distinct canvas features but this would make selection of a complete exon more complex and ths will not be done. An exon with a CDS/UTR split will be dislayed as a single feature but my consist of 1, 2, or 3 boxes.  Unlike alignments intron lines will be added as explicit canvas features.
</p>
<p>There will be no data structure in the canvas for a composite transcript object, just an intron/exon structure, each of which will refer to the transcript feature in the feature context and be linked to its siblings.
</p>

<h4>Handling focus highlight</h4>
<p>In the initial trial we had the luxury of knowing that features do not overlap and focus highlight has been implemented simply by setting the colour of individual features.
</p>
<p>For the more general case we need to display multiple features on top of others and in the existing implementation this has been done by re-ordering the features in a column (eg via foo_canvas_raise_to_top()).  Note that this has resulted in a few anomalies in the past and there are instances where the focus code is deficient (eg revcomp will restore only a single focus item.
</p>
<p>A review of this is needed and different methods used: as we have sorted data for display then we cannot re-order features to highlight them.
</p>
<p>One way, using the proposed canvas structure is to flag each focussed item and have display code display these after displaying all others. This would be a simple process of adding focus items to a list on expoose (but note that wiggle plots are perhaps complicated ... these currently do not show focus highlights as there is no obvious way to do this).
</p>
<p>An alternative would be to post process a focus items list on expose; this does not fit so well into the overal canvas structure but could possibly be handled by the block objects.  This would be difficult to implement if as proposed we do canvas items first and then containers.

<h3>Feature data structures</h3>
<p>
The above implies data structured approximately like this:
<pre>
simple feature struct
        feature type
        y coord
        x coord (umbumped)
        x coord (bumped)
        left link       pointer to sub-feature (NULL)
        right link      pointer to sub-feature (NULL)

</pre>
<pre>
complex feature struct
        simple feature struct
        left link       pointer to sub-feature or NULL
        right link      pointer to sub-feature or NULL
</pre>
<pre>
transcript feature struct
        complex feature struct
</pre>
<pre>
alignment feature struct
        complex feature struct
        gaps data
        homology data
</pre>

NOTE that we will pre-calculate same-name alignment groups from existing GFF data, or use VULGAR strings to retrieve this, and do this when features are first displayed: this is not something computed on bump or select as at present.

</p>

<h4>Feature class functions</h4>
<p>We wish to implement a base level of code and data that interfaces to featureset ie whole column functions and then provide feature specific functions per type of feature.  We also wish to avoid the use of GObjects which implement OO style features quite slowly in real time rather than at compile time.
</p>
<p>There are two obvious ways to approach this:
<ul>
<li> use C++ and implement a mixed model program
<li> provide function pointers for each source (context) featureset.  Note that as we can mix several in one canvas featureset we will have to have a pointer to a featureset level data structure in each feature struct (as would be implied by using C++).
eg:
<pre>
feature
        ->featureset-interaface
                ->display()
</pre>
</ul>
</p>


<h3>Code structure</h3>
<p>There are a number of clearly defined functional parts:
<ul>
<li> skip list- implement in base class
<li> expose handler - selection of features to draw by base class
<li> drawing a given feature -  implement in child class
<li> operating multiple singleton featureset items (base class)
<li> bump canvas featureset/ column: independant of feature type (base class)
<li> focus highlight (base class)
</ul>
</p>

<p>The existing GraphDensity module can be used as a basis for this wiht the addition handling overlap and focus.
</p>
<p>Subsequently we can add on column summarise functions.</p>

<p>Thus we expect an implementation involving the following files:
<pre>
zmapWindowCanvasBlock.c         root/block container
zmapWindowCanvasColumn.c        column container
zmapWindowCanvasFeatureSet.c    canvas featureset item
zmapWindowCanvasColBump.c       column bump
zmapWindowCanvasFocus.c         handle highlights
</pre>
and also a few more to handle feature specific things like display styles:
<pre>
zmapWindowCanvasTranscript.c
zmapWindowCanvasAlignment.c
zmapWindowCanvasBasic.c
zmapWindowCanvasGlyph.c
zmapWindowCanvasGraphDensity.c
zmapWindowCanvasAssembly.c
zmapWindowCanvasText.c
zmapWindowCanvasSequence.c
etc

</pre>
</p>

<h3>Development plan</h3>

<h4>Implement generic featureset code that initially supports simple features</h4>
<p>Currently all displayable items are foo canvas items which are children of a foo canvas group that is a ZMapWindowCanvasItem, and adding a featureset foo canvas item requires there to be a ZmapWindowCanvasItem around it. This is required by the current interface via the ItemFactory ?? and also some code in the base ZMapWindowCanvasItem ??.  We wish to remove ZMapWindowCanvasItem but cannot do this until all instances can be removed.
<br />
<b>WHY?</b>
</p>
<p>In the interim this means we have to add dummy ZmapWindowCanvasItems around featureset canvas items, and this has been done for ZmapWindowGraphDensityItems using a GraphItem type.  To avoid extra work and repetition of code we need to change this to be a generic featureset type of ZMapWindowCanvasItem and to provide an interface to generic functions that will work for multiple types of features.  This will result in the base data structure that can be extended per feature type.
</p>
<p>Note however that the graph density items code will remain as is, as it performs some quite different processes such as re-binning the source data.  After implementing generic featureset items this may be reviewed and common code integrated in some way if this turns out to be appropriate.  It is likely that the overall canvas interface to GDI will have to be changed slightly.
</p>

<p>Copy the basic feature code for alignments - this will give the same outward appearance as existing code for unbumped data.
</p>

<h4>Implement unbumped alignments as a featureset item</h4>
<p>Using the interface as above, modify the ItemFactory to create singleton alignment featuresets and add features as simple data structures.
</p>
<p>Add a module to handle display of alignments as umbumped (simple boxes, no decorations).  Note this requires overlap to be handled on paint.
</p>
<p>Implement left and right links for same-name features.
</p>
<p><b>NOTE</b>Column summarise code could be added here.
</p>

<h4>Handling focus highlight</h4>.
<p>Historically this are has been implemented in a way that results in a few anomalies and we cannot alter the interface without changing a lot of application level code.  What we are aiming to provide is:
<ul>
<li>select and highlight simple or complex features via the mouse and allow the choice of complete complex objects or sub-parts (eg exons)
<li> Choice of highlight colour via styles and window configuration.  Focus highlight can be set globally or via the selected colour-type.  The existing code is complex and confusing but what appears to be coded is that the Focus module sets a default colour if it is configured. the the Canvas item set the colour by looking up its style and defaulting to normal colour is selected is not defined.  In the case of focus highlight then it overwrites the colours with the global default ones.
<li> globally defined evidence highlight colours
<li> hide and show selected items via the 'h' and Delete keys
<li> selections to persist through revcomp and bump (and obviously scroll and zooom)
</ul>
All the above has been implemented by setting foo canvas item properties and the interface is though the zMapWindowCanvasItemSetIntervalColours() function.
</p>
<p>For canvas featuresets this function will be called for the relevant features and currently sets flags in the feature data structure - to minimise memory use it was decided to use flags rather than adding colour attributes.
Features are painted using colours that are cached by the featureset (to reduce the number of GDK calls), and currently a focus highlight can only be one colour, which is set in the featureset data struct, and used for the specified feature(s) if a flags is set.
<p>The interface used by the ZMap code sets colours in FooCanvasItems generated by a series of configuration options and could be any values at all but in practice can only taken from a small set. To use memory effcieintly while still allowing full generality and extendability of focus/select code the following process will be adopted.
<ul>
<li> flags will be stored in the feature data structs to specify what king of colour attribute to use. So far this consists of normal (no flags set) or focus (a set of up to 8, of which two are allocated)
<li> when displaying a feature the  normal style colours will be cached in the featureset data struct and this will result in efficient use for homgenous data.
<li> a function will be provide by zmapWindowFocus.c to return highlight colours depending on configuration. These will not be cached as we do not expect then to be used exentsively, and the may change between different styles according to configuration.  Note that in current code access to the window data structures is needed but this is not necessary as this data can be cached by the WindowFocus module. The focus flags passed to the featurset code will include a reference to the underlying window (eg an index to a focus cache) so that scope does not become an issue.
<li> the style data structures and code will be modifed to cache GDK colour as mapped to the canvas - currently these are mapped on every access.
<li> Focus /highlight code will provide flags as well as actual colours - old style foo canvas item code will use colours and featureset item code will use flags. After implemntation is complete the historical interface will be removed.
</ul>
</p>


<h4>Implement generic bumping code</h4>
<p>This should process data via a canvas featureset's skip list and set feature's x-coordinates.
</p>
<p>Modify display code to test for X-coordinates if bumped, and handle decorations and gaps.  The featureset struct will hold a 'current bump mode' (if set) and if not will calculate bump coordinates by lazy evaluation. Note that if the mark changes we could have to recalculate these, depending on interpertation of overlap.
</p>


<h3>Object Inheritance and structure </h3>
<p>It is desired to implement code in such a way as to allow common features to be coded at the featureset level and for different types of features to operate via a similar interface.  Historically this has been done by using GOjects and extending FooCanvasItems but we wish to avoid this as it will run quite slowly.
</p>
<p> The main performance gains we expect to achieve are by not polling every feature and by optimiising paint operations, but performance gains of 4x are easily achievable by not using GObjects.
</p>
<h4>Inheriting data from a base classs</h4>
<p>On the assumption that we code in C then we can inherit a base data structure quite easily by including it in out child object.

<pre>
struct base_feature
{
        int y1,y2;
}

struct alignnment_feature
{
        struct base_feature base;
        etc
}
</pre>
One consequence of this is that memory allocation for features either has to work with the largest child object or operate separate free lists for each type.  As memory use has been dominated by alignments and these are the most complex objects (with gaps) it is tempting to do the former, but with the advent of paired reads this may no longer be valid.
</p>
<h4>Inheriting functions</h4>
<p>In an attempt to keep things simple, a simple array of functions indexed by feature type (an enum) can be used.   This array can be maintained by the featureset class and a wrapper function provided to type check and call safely. Functions can be inherted or replaced quite easily.
</p>
<p>
Functions will be limited to those needed by display, mouse, focus etc. and are defined and maintained by the featureset class, not the feature classes themselves. Note that unlike GObjects this is a global array of blank functions and not a series of function pointers defined in a class struct.
</p>



