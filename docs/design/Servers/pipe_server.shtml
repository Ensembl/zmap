<!--#set var="banner" value="Pipe Server"-->
<!--#include virtual="/perl/header"-->

<!--#set var="author" value="edgrif@sanger.ac.uk" -->

<style>
pre{ width: 95%; background-color: #DDDDDD; border-style: solid; border-width: 1px; padding: 10px }
.example{ border-color: #000000 }
</style>



<H2>Pipe Server Implementation and Configuration</H2>


<a name="implementation"></a>
<h3>Pipe Server Implementation</h3>

<p>The pipe server currently accesses data from two types of source:</p>

<ul>
  <li><p> Normal files</p>
  <li><p> Unix style pipes</p>
</ul>

<p>In the latter case the pipe server spawns a child process that it connects
to via pipes to retrieve the data from the source.</p>

<p><b>Note:</b> in the future it is likely we will return to file handling
being handled in a separate server type as the pipe server code is complicated
by handling both.</p>

<h4>Child process handling</h4>

<p>The child process is spawned, pipes set up and a callback registered for
when the child process exits:</p>

<pre>gboolean g_spawn_async_with_pipes() ;

guint g_child_watch_add() ;
</pre>

<p>The pipe server is now connected to the child process by pipes and will
be notified when the child process dies in its callback function.</p>

<p>The GLib GIOChannel package is used to read data from the pipes, in essence:</p>

<pre>GIOChannel *g_io_channel_unix_new() ;

GIOStatus g_io_channel_read_line_string() ;

GIOStatus g_io_channel_shutdown() ;
</pre>

<p>Note that none of the <code>GIOChannel</code> calls give any indication that the child process
has died. <code>g_io_channel_read_line_string()</code> will return an <b>EOF</b> when either the
child process exits or it closes the pipe.</p>

<p>Any of the following scenarios are possible and must be handled by the pipe server
code:</p>

<ul>
  <li><p>The child process starts up, writes all of its data to the pipe and then exits normally
      <b>before</b> any other pipe server calls are executed.</p> 
  <li><p>The child process starts up, writes enough data to the pipe to fill it and then blocks
      waiting for the pipe server to read more data.</p>
  <li><p>The child process starts up and then fails and returns a non-zero exit code
      <b>before</b> any other pipe server calls are executed.</p> 
  <li><p>The child process starts up and then fails at some time during its writes to the pipe
      and returns a non-zero exit code.</p>
  <li><p>The child process just crashes.</p>
</ul>

<p>In normal pipe operation if the child process exits or crashes before,
during or after writing to the pipe, pipe server just receives an <b>EOF</b>
when it tries to read from the pipe. In other words the pipe server will not be
able to detect whether the child process exited normally or abnormally.</p>

<p>To address this problem the pipe server uses a GLib callback mechanism that
allows it to be notified when the child process exits and also what the exit
status of the process was. The arguments to the callback function include the
exit status of the child process which the pipe server stores in it's main
struct.</p>

<p>Currently each server interface function after the child process has been
created checks to see if the child has terminated and if so what its exit
status was. if the child terminated normally then the interface function
continues otherwise it sets a "failed" exit status and returns.</p>

<p>It is important to understand that because the buffers used by pipes can be
quite large it's possible for the child process to write all of its output to
the pipe and then exit cleanly <b>before</b> pipe server has even started to
read from the pipe.</p>

<p>If the child process has exited normally this presents no problems since all
the data is there to be read from the pipe's buffers. If however the child exited
abnormally there is no guarantee about any of the data in the pipe and the callback
mechanism is crucial to recording this information. This is why currently each
interface function first checks to see if the child process exited abnormally.</p>








<a name="configuration"></a>
<H3>Pipe Server Configuration</H3>

<p>This is Malcolm's unformatted text.</p>

<pre>

Scripting interface and configuration for the ZMap pipeServer module
mgh 27 Nov 2009

The pipeServer module is based on the existing fileServer and is configured using a [source] stanza in the ZMap config file for each pipe.  Scripts are to be installed locally with ZMap and the directory itself will be identified in the [ZMap] stanza in ~/ZMap/ZMap.
eg:

[ZMap]
script-dir=/nfs/users/nfs_m/mh17/ZMap/scripts
# Of course these could be stored centrally somewhere if desired.

# Each data source must be referenced in [ZMap] by listing the source stanzas like this:
sources = acedb ; other-feed ; yet_another_one

# Columns are displayed in the order given: in the example above all the acedb features first then the 'other_feed' etc.


# If styles are noe defined via ACEDB the a file must be given in the ZMap stanza (not the source stanza) eg:
stylesfile = /nfs/users/nfs_m/mh17/zmap/styles/ZMap.b0250.file.styles


When configured, ZMap will request data from each source in parallel, hopefully speeding things up a lot. Each script will obtain and send the data 'somehow'.  They will replace the existing mechanism of Otterlace retreiving the data sequentially and adding to ACEDB on startup.


In each source stanza (one must exist for each data source) the syntax is the same as for existing file:// and acedb:// sources, but specifically for pipe:// sources we interpret the configuration as follows:

URL's take the form

        <scheme>://[user][:password]@<host>[:port]/[url-path][;typecode][?query][#fragment]

and:
        <scheme> will be 'pipe'

        user:password@host are not used and if present are ignored

        port is not used and if present will be ignored

        url-path is the path of the script.
        Note that according to http://rfc.net/rfc1738.html a single leading '/' signifies a relative path and two signifies absolute.  We will interpret relative paths as relative to the ZMap scripts directory.

        typecode is not used and will be ignored if present

        query will be expanded into a normal argv vector

        fragment is not used and will be ignored


Typically we expect a pipe:// data source to have only one (or very few) feature sets, as a major design aim is to exploit concurrent operation.  Other configuration parameters will operate as normal (eg 'sequence=true' (which can only appear in one source) and 'navigator_sets=xxx,yyyy').

Here is an example for a test script that simple outputs an existing GFF file.

[source]
url = pipe://getgff.pl?file=b0250_curated.gff
featuresets = curated_features ; curated ; genomic_canonical
styles = curated_features ; curated ; genomic_canonical



A more realistic one with an absolute path... (but needs featuresets and styles and stylesfile specifying)
[source]
url=pipe:///software/anacode/bin/get_genes.pl?dataset=human&name=1&analysis=ccds_gene&end=161655109&csver=Otter&cs=chromosome&type=chr1-14&metakey=ens_livemirror_ccds_db&start=161542637&featuresets=CCDS:Coding;CCDS:Transcript




Script operation: some rules

A script must start with #!<program> or else it will not be exec'd.  (Assuming Linux)

A script may obtain data in any way it likes but must output valid GFF data and nothing else on STDOUT (but anything is valid in a comment).

Brief error messages may be output to STDERR and these will be appended to the zmap log. STDERR output is intended only to alert users of some failure (eg 'warning not all data found' or 'cannot connect to database') and not as a detailed log of script activity - if  this is needed then the script should maintain its own log file.  A warning message will be presented to the user, consisting of the last line in STDERR and hopefully this will be enough to explain the situation with resorting to log files.
Regardless of whether an error message is sent ZMap will attempt to use the GFF data provided.
ZMap will probably read STDERR after STDOUT is closed, and only if some error is encountered.

Arguments will be given in the format key=value with no preceeding dashes, these will be as extracted from the server query string.  (If people care about this we could change it...)

Extra arguments may be added subject to implementation:

zmap_start=zmap_start_coord         // in zmap coordinates not bases (if configured)
zmap_end=zmap_end_coord
wait=9                              // delay some seconds before sending data (can be given in the query string, main use is for testing)




</pre>


<!--#include virtual="/perl/footer"-->





