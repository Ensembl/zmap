<!--#set var="banner" value="Configuration Files for ZMap"-->
<!--#include virtual="/perl/header"-->

<!--#set var="author" value="edgrif@sanger.ac.uk" -->
<!-- $Id: configuration.shtml,v 1.1 2011-01-10 13:34:29 edgrif Exp $ -->
<!-- this is for the up to date ZMap -->
<style>
pre{ width: 95%; background-color: #DDDDDD; border-style: solid; border-width: 1px; padding: 10px }
.example{ border-color: #000000 }
div.spacer { clear: both; }
div.stanza { clear: both; padding-top: 5px; }
div.stanza div.opt  { float: left; width: 15%; text-align: left; font-weight: bold; }
div.stanza div.desc { float: right; width: 85%; text-align: left; }
</style>


<h2>ZMap Configuration</h2>



<fieldset> <legend>Overview</legend>

<p>ZMap is highly configurable using optional config and <a href="styles.shtml">styles</a> files.
The styles file controls the visual appearance of features. This document describes the config file, which
controls the configuration of data sources and various other options for customizing the behaviour ZMap.</p>

ZMap configuration is via command line options and a number of resource files
read during initialisation and during subsequent processing.
This section describes the various ways ZMap can be configured. Note however that ZMap can 
also be run standalone without any configuration at all!

</p>

</fieldset><br />


<fieldset>
<legend id="commandline">Command Line Options</legend>

<p>
ZMap recognises command line options starting with double dashes. Run <code>zmap --help</code> to see usage information:
</p>

<pre id="usage" class="example">
Usage:
  zmap [OPTIONS] &lt;file(s)&gt;

ZMap 0.21.0-395-g8cd9e5a (compiled on Mar 31 2014 15:18:13)

A multi-threaded genome browser and annotation tool.

Help Options:
  -h, --help                                             Show help options
  --help-all                                             Show all help options
  --help-gtk                                             Show GTK+ Options

Application Options:
  --version                                              Program version.
  --raw_version                                          Code version.
  --serial                                               Operate pipe servers in serial on startup
  --remote-debug=debug level: off | normal | verbose     Set RemoteControl debug level.
  --peer-name=peer app name                              Peer Remote Control app name.
  --peer-clipboard=peer clipboard unique id              Peer Remote Control clipboard name.
  --start=coord                                          Start coord in sequence, must be in range 1 -> seq_length.
  --end=coord                                            End coord in sequence, must be in range start -> seq_length, but end == 0 means show to end of sequence.
  --sleep=seconds                                        Makes ZMap sleep for given number of secs at start-up to give time to attach a debugger.
  --timing                                               switch on timing functions
  --shrink                                               allow shrinkable ZMap window
  --single_screen                                        Force zmap to open tools like blixem on the same screen that it is running on.
  --sequence=sequence_name                               Sequence name.
  --conf_file=file path                                  Relative or full path to configuration file.
  --conf_dir=directory                                   Relative or full path to configuration directory.
  --win_id=0x0000000                                     Window ID of the controlling application.
  --remote-debug=debug level: off | normal | verbose     Set RemoteControl debug level.
  --peer-name=peer app name                              Peer Remote Control app name.
  --peer-clipboard=peer clipboard unique id              Peer Remote Control clipboard name.
  --styles_file=styles file path                         Relative or full path to styles file.
  --display=DISPLAY                                      X display to use
</pre>

</fieldset><br />





<fieldset>
<legend>Input files</legend>
<p>When running ZMap standalone, you can simply provide GFF file(s) on the command line. ZMap supports GFF versions 2 and 3.</p>
<pre>
zmap &lt;file1&gt; [&lt;file2&gt;]
</pre>

<p>To pipe files via stdin, use "-" as the filename:</p>
<pre>zmap -</pre>
</fieldset>

<fieldset>
<legend>Configuration Files - Format</legend>

<p>
The format of the configuration files follows a stanza-based key-value format
defined in the <a href="http://library.gnome.org/devel/glib/stable/glib-Key-value-file-parser.html">
GLib Key-value parser</a> package, e.g.
</p>

<pre class="example">
# this is a comment.

[StanzaName]
# another comment.
property = value                           # string
numeric = 1.0                              # float
number = 32000                             # int
truth = true                               # boolean
list = one ; two ; three ; four            # multiple strings

[Next Stanza]

<i>etc.</i>

</pre>
<p>White space is not important.</p><p>
Any text following (and including) a "#" is interpreted as a comment and ignored.</p><p>
Some keywords are mandatory within a stanza and hence have no default value. If are not specified the stanza is ignored.</p>
<p>
A longer annotated example can see seen <a href="config_file.shtml">here</a>.
</p>


</fieldset><br />


<fieldset>
<legend id="sectionfiles">Directories and Files</legend>

<p>
ZMap uses configuration files to find its servers, files and
to configure aspects of its interface.
By default ZMap looks for these files in the users <code><b>$HOME/.ZMap</b></code> directory.
The  user can specify an alternative directory using the
<a href="#commandline">--conf_dir</a> option.
</p>

<p>
If the configuration directory does not exist then ZMap will not run.
</p>


<h4 id="stylefile">ZMap configuration file</h4>

<p>
By default the <code><b>ZMap</b></code> configuration file is searched for
in the configuration directory but an alternative file can be specified with
the <a href="user_doc/configuration.html#commandline">--conf_file</a> option.
If this file does not exist ZMap will not run.
</p>


<h4 id="stylefile">Styles configuration file</h4>

<p>This  file should  be located in the
configuration directory and named according to the value  of the
stylesfile option in the <a href="user_doc/configuration.html#stanzas">ZMap</a> stanza of
the <code><b>ZMap</b></code> configuration file.</p>

</fieldset><br />


<fieldset>
<legend id="stanzas">ZMap Configuration File Stanzas</legend>

<p>
The following stanzas are supported by ZMap:
</p>

<ul>
  <li><b><a href="#app">ZMap</a> -</b>
      main configuration stanza controlling the zmap application.
  <li><b><a href="#source">(source)</a> -</b>
      stanza(s) specifying data sources from which to load a feature view.
  <li><b><a href="#featuresets">Columns</a> -</b>
      stanza specifying how to map data sources into a feature column.
  <li><b><a href="#featuresetstyle">Featureset-style</a> -</b>
      stanza specifying which style to use to dispaly a featureset.
  <li><b><a href="#window">Window</a> -</b>
      stanza controlling the ZMap feature display window.
  <li><b><a href="#blixem">Blixem</a> -</b>
      stanza specifying parameters for running the blixem sequence viewer.
  <li><b><a href="#logging">Logging</a> -</b>
      stanza controlling zmap logging facility.
  <li><b><a href="#debug">Debug</a> -</b>
      stanza controlling zmap debugging output.
  <li><b><a href="#style">(style)</a> -</b>
      stanza(s) specifying styles with which to display features.
</ul>


<p>
ZMap  will work with single or multiple data sources.  Each one must be named uniquely and listed in the sources key in the ZMap stanza.
<br />
Styles should be defined a separate configuration file, referred to in the ZMap stanza with the 'stylesfile' key.
</p>

</fieldset><br />


<a name="app"></a>
<fieldset><legend>ZMap Application Options</legend>
These are options that control the fundamental way ZMap behaves.<p>
</p><table border="1" cellpadding="3" cellspacing="3">
<tbody><tr>
<th>Stanza </th><th colspan="3" align="center&gt;">"ZMap"  </th></tr>
<tr>
<th>Keyword </th><th>Datatype </th><th>Default </th><th>Description  </th></tr>
<tr>
<th>"show_mainwindow" </th><td>Boolean </td><td>true </td><td>If false
then the initial main zmap window is not shown, this is useful when zmap
is being controlled by another application and its not necessary for
the user to directly open feature windows themselves. </td></tr>
<tr>
<th>"exit_timeout" </th><td>Int </td><td>5 </td><td>Time in seconds to
wait for zmap to finish clearing up server connections before exiting.
After this zmap will exit and some connections may not have been
clearly terminated. </td></tr>
<tr>
<th>"default_sequence" </th><td>String </td><td>"" </td><td>if a particular sequence has its own unique configuration file, then the sequence name can be specified in the file.  </td></tr>
<tr>
<th>"default_printer" </th><td>String </td><td>"" </td><td>Specify a printer which will be the default printer for screen shots from ZMap.  </td></tr>
<tr>
<th>"script-dir" </th><td>String </td><td>ZMap run-time directory</td><td>Specify the directory where data retrieval scripts are stored by default.  </td></tr>
<tr>
<th>"data-dir" </th><td>String </td><td>ZMap run-time directory</td><td>Specify the directory where GFF data files are stored by default.  </td></tr>
<tr>
<th>"pfetch" </th><td>String </td><td></td><td>Address of the pfetch server. </td></tr>
<tr>
<tr>
<th>"pfetch-mode" </th><td>String </td><td></td><td>Address of the pfetch server. </td></tr>
<tr>
<tr>
<th>"thread-fail-silent" </th><td>Boolean </td><td>False</td><td> Whether or not to pepper the screen with warning messages if pipe-servers fail.</td></tr>
<tr>
<th>"source" </th><td>String </td><td>"" </td><td>A list of data sources to use to request feature data.  </td></tr>
<tr>
<th>"navigatorsets" </th><td>String </td><td>"" </td><td>A list of feature sets to use in a navigator window.  </td></tr>
<tr>
<tr>
<th>"columns" </th><td>String </td><td>""</td><td>If specified this defines the left to right display order of feature columns on the screen. Featuresets are mapped into columns (by default 1-1).  By convention strand specific columns appear to the left of '3-Frame' and the columns are sorted to the left or right (in this order on each side) of '3-Frame' depending on whether they appear in this list before or after '3-Frame' Reverse strand columns appera left of the strand separator, again in this order.  If not specified, column ordering is defined by the ordering of the data source definitions and the featuresets suppoerted by them.  If only a fraction of the supported columns are defined in this option any remaining ones are displayed on the right.
<tr>
<th>"curl-debug" </th><td>Boolean </td><td>false </td><td>Set to 'true' to enable debug output from curl.  </td></tr>
<tr>
<th>"ipresolve" </th><td>String </td><td>"" </td><td>Set to 'ipv4' or 'ipv6' to force curl to use that option.  </td></tr>

</td></tr>
<tr>
</tbody></table>
<p>Please refer to <a href="../notes/featureset_col.shtml">this file</a> for some notes about some other options affecting column and featureset layout and styles etc etc.</p>
</fieldset>

<a name="logging"></a>
<fieldset><legend>Logging Options</legend>
ZMap writes messages to the logfile $HOME/.ZMap/zmap.log by default,
but the log filepath and other parameters of logging can be specified
in the "logging" stanza.<p>
</p><table border="1" cellpadding="3" cellspacing="3">
<tbody><tr>
<th>Stanza </th><th colspan="3" align="center&gt;">"logging"  </th></tr>
<tr>
<th>Keyword </th><th>Datatype </th><th>Default </th><th>Description  </th></tr>
<tr>
<th>"logging" </th><td>Boolean </td><td>true </td><td>Turn logging on or off.  </td></tr>
<tr>
<th>"file" </th><td>Boolean </td><td>true </td><td>true: messages to logfile, false: messages to stdout or stderr.  </td></tr>
<tr>
<th>"directory" </th><td>String </td><td>"$HOME/.ZMap" </td><td>Absolute or relative directory to hold logfiles (relative is relative to $HOME/.ZMap).  </td></tr>
<tr>
<th>"filename" </th><td>String </td><td>"zmap.log" </td><td>Name of logfile, this is combined with "directory" to give the logfile path.  </td></tr>

<th>"catch-glib" </th><td>Boolean </td><td>true </td><td>Catch Glib errors and add to the log.  </td></tr>
<th>"echo-glib" </th><td>Boolean </td><td>true </td><td>Output caught GLib errors to STDOUT.</td></tr>
<tr>

</tbody></table>
</fieldset>

<a class="anchor" name="source"></a>
<fieldset><legend>Data Source Options</legend>
ZMap can obtain sequence data from files and servers of various kinds and
source stanzas specify information about the source. Each source stanza
must have a unique name, and must be referenced in the 'source'
option in the [ZMap] stanza.<p>
Data sources are identified using urls in the following supported variants:</p><p>

</p>
<pre>
url = "&lt;url_identifier&gt;"
where &lt;url_identifier&gt; should match the following: ([] = optional)

  &lt;protocol&gt;://[[&lt;username&gt;:&lt;password&gt;@]&lt;hostname&gt;[:&lt;port&gt;]]/&lt;location&gt;#&lt;format&gt;

      &lt;protocol&gt; may be one of acedb, file, pipe, das or http
      &lt;username&gt; should be a username string
      &lt;password&gt; should be a password string
      &lt;hostname&gt; should be a hostname string
      &lt;port&gt;     should be a port number
      &lt;location&gt; should identify the location on a particular server
                       (this may include a query string)
      &lt;format&gt;   may be one of gff, das, das2 (default gff)

Examples:

    file:///my_dir/my_gff_file.gff#gff
    pipe:////software/anacode/bin/get_genes?dataset=human&amp;name=1&amp;analysis=ccds_gene&amp;end=161655109...
    http://das1.sanger.ac.uk:8080/das/h_sapiens#das
    acedb://any:any:23100
</pre>
<p>
Note that for file: and pipe: sources file:///file is a relative file name and file:////</a> is absolute.
</p>

<table border="1" cellpadding="3" cellspacing="3">
<tbody><tr>
<th>Stanza </th><th colspan="3" align="center&gt;">"source"  </th></tr>
<tr>
<th>Keyword </th><th>Datatype </th><th>Default </th><th>Description  </th></tr>
<tr>
<th>"url" </th><td>String </td><td>Mandatory </td><td>The url specifying where to find the source.  </td></tr>
<tr>
<th>"featuresets" </th><td>String </td><td>Mandatory </td><td>A list of
feature sets to be retrieved from the source(s). The list also gives
the order in which the feature sets will be displayed in the zmap
window. If not specified, all available feature sets will be retrieved
and they will be displayed in whichever order the list of available
sets was returned by the server. </td></tr>
<tr>
<th>"timeout" </th><td>Int </td><td>120 </td><td>Timeout in seconds to wait for a server to reply before aborting a request.  </td></tr>
<tr>
<tr>
<th>"format" </th><td>String </td><td>"" </td><td>Defunct, use the "url" keyword/value to specify the format.  </td></tr>
<tr>
<th>"styles" </th><td>string </td><td>"" </td><td>List of all styles to
be retrieved from the server. If not specified then all styles will be
read if a file has been specified in the [ZMap] stanza, otherwise the
source should provide the styles itself. By default a featureset will
use a style of the same name.<p>
</p></td></tr>
<tr>
<th>"stylesfile" </th><td>String </td><td>"" </td><td>If specified the source will read styles data from this file. This is mandatory for pipe and file Servers, and optional for database (eg ACEDB or DAS).  If not specified the Server must supply its own styles.</td></tr>
<tr>
<th>"delayed" </th><td>Boolean </td><td>False </td><td> Prevents data from being requested on startup.</td></tr>
<tr>
<th>"group" </th><td>String</td><td>"start" </td><td>Controls whether or not to allocate one thread per featureset. Can be set to:
<ul>
<li>never - always allocate one thread per featureset
<li>start - group on startup but not for delayed servers
<li>delayed - group for delayed servers
<li>always - always group
</ul>
and these options control how requests for the server's featuresets are grouped. If a bunch of featuresets are requested together then grouping implies that they get combined into the same request from the server and one thread is allocated for the request and the data will be combined.  Otherwise each featureset is allocated its own thread.
 </td></tr>

</tbody></table>
</fieldset>

<a  name="featuresets"></a>
<fieldset><legend>Mapping data sources into display columns</legend>
<p>Traditionally, ACEDB provided this mapping during ZMap startup, but without an ACEDB connection we have no way of recieving this data.</p>
<p>By default, any feature requested from a pipe or other server that does not support the REQ_FEATURESETS request will be mapped to
a column of the same name - this may produce a wider than normal display, but the data will at least be visible.</p>
<p>
The stanza <b>[columns]</b> may be used to override this default mapping and will contain lines of the form:
<pre>
column = source1; source2; ... sourceN
</pre>
where 'column' is the name of the column that is used to display all the sources and sourceX is the name of a featureset used to request the data as receieved from a pipe or other server.
</p>
<p><b>NB:</b> This stanza will only be read in when creating a view and not on requesting a column. To change this mapping it is necessary to update the file ZMap (config) and then create a new ZMap window.</p>
</fieldset>

<a name="featuresetstyle"></a>
<fieldset><legend>Specifying display styles for features</legend>
<p>By default a featureset is assumed to be displayed using a style of the same name but if you would like to use another style (eg to display several featuresets in the same style) the you can specify each one in the [featureset-style] stanza with a command of the form 'featureset = style', for example:
<pre>
[featureset-style]
EST_human = EST_align
EST_mouse = EST_align
</pre>
</p>
</fieldset>

<a name="misc_set"></a>
<fieldset><legend>Miscellaneous column and featureset configuration</legend>
<p>There are a few extra options that can be set for featuresets and columns and these are handled by some simple stanzas.  In each case the options are set via a command of the form 'featureset = option'
or 'column = option'.
</p>
<p>These stanzas are:
<ul>
<li><b>[column-style]</b> attach a style to the column as a whole
<li><b>[column-description]</b> a text field
<li><b>[featureset-source]</b> map the featureset name to another, known by the server
<li><b>[featureset-description]</b> a text field
</ul>
</p>
</fieldset>

<a name="style"></a>
<fieldset><legend>Style Options</legend>
<p>NB: these stanzas appear in a separate config file specified in [ZMap] stylesfile=xxx.  Available options are given <a href="user_doc/styles.shtml">here</a>.  Each style is specified in a stanza of the same name as the style.</p>
</p>
</fieldset>
<a name="glyphs"></a>
<fieldset><legend>Defining Glyph shapes</legend>
<p>Some Zmap styles make use of glyphs, which are nominally shapes that are always drawn as the same size regardless of zoom level.  These are not hard-coded and to be used the shapes must be defined in the [glyphs] stanza.  The styles that use glyphs will define various options that control any variation on this simple model; here we simply define the shape and default size in pixels.
</p>
<p>ZMap supports line based and circle/ellipse based glyphs. These can both be used to create filled shapes and line based glyphs can also be used to draw a series of lines.  Fill and outline colours are specified in the style as normal.
</p>
<p>Each glyph is defined by a name and a series of coordinates and some delimeter characters:
<pre>
[glyphs]
up-triangle=<0,-4; 4,0; -4,0; 0,-4> # 4th point to complete the loop and trigger internal fill
up-walking-stick=<0,0; 8,0; 8,6>
truncated=<0,0; 3,1 / 6,2; 9,3 /  12,4; 15,5>          # a sloping dashed line
circle=(-4,-4 4,4)                # a full circle
horizontal-ellipse=(-2,-4 2,4)    # a flat ellipse
lr-circle=(0,0 4,4)               # a small circle offset to below and right of the feature
r-half-moon=(-4,-4 4,4 270 90)    # a half moon on the RHS
</pre>
A line based glyph becomes a filled shape if the first and last coordinates are the same. Lines are drawn between successive coordianates unless separated by a '/'. The coordinates are as x,y based around the centre of the glyph shape. Circle/ellipse coordinates specify the bounding rectangle, with optional start and end radial coordinates based from centre right in degrees.
</p>
</fieldset>

<a name="window"></a>
<fieldset><legend>ZMapWindow Options</legend>
The ZMap feature window is where sequence features are displayed,
various aspects of it can be configured from colours to performance
factors.<p>

</p><table border="1" cellpadding="3" cellspacing="3">
<tbody><tr>
<th>Stanza </th><th colspan="3" align="center&gt;">"ZMapWindow"  </th></tr>
<tr>
<th>Keyword </th><th>Datatype </th><th>Default </th><th>Description  </th></tr>

<tr>
<th>"canvas_maxsize" </th><td>Integer </td><td>30000 </td><td>Set the
maximum vertical extent of the feature window. Setting a smaller size
will result in faster display as less data gets mapped as you zoom in
but will mean you have less data to scroll over. The default is to
create close to the maximum window size possible, this is 32k for X
Windows. </td></tr>

<tr>
<th>"canvas-maxbases" </th><td>Integer </td><td>0 </td><td>Set the vertical extent of the feature window using dna bases. Is just an alternative method of setting "canvas-maxsize".  </td></tr>

<tr>
  <th>"cursor" </th>
  <td>string </td><td>user-defined</td>
  <td><p>cursor =  [ zmap_xxxx | standard X cursor name ]</p>


      <p>The standard X cursors are the ones that we all know and love and have been in X
      Windows forever, they have names like "crosshair", "pirate" and so on. Custom zmap
      cursors all have the prefix "zmap_" in their names, the currently available ones are:</p>

      <pre>
      zmap_cross        thick crosshair
      zmap_circle       circular cursor
      zmap_crosshair    thin crosshair

      e.g.
      [ZMapWindow]
      cursor = zmap_crosshair </pre>
  </td>
</tr>

<tr>
<th>"keep-empty-columns" </th><td>Boolean </td><td>false </td><td>Some
requested feature sets may not contain any features, by default these
will not be displayed. For multiple blocks/alignment display it may be
clearer to get zmap to display empty "placeholder" columns for these
sets so that columns in different blocks line up better. </td></tr>

<tr> <th>display-forward-coords </th> <td>string</td> <td> </td> <td> </td> </tr>
<tr> <th>show-3-frame-reverse </th> <td>string</td> <td> </td> <td> </td> </tr>
<tr> <th>align-spacing </th> <td>int</td> <td> </td> <td> </td> </tr>
<tr> <th>block-spacing </th> <td>int</td> <td> </td> <td> </td> </tr>
<tr> <th>strand-spacing </th> <td>int</td> <td> </td> <td> </td> </tr>
<tr> <th>column-spacing </th> <td>int</td> <td> </td> <td> </td> </tr>
<tr> <th>feature-spacing </th> <td>int</td> <td> </td> <td> </td> </tr>
<tr> <th>feature-line-width </th> <td>int</td> <td> </td> <td> </td> </tr>

<tr>
<th>"colour-root" </th><td>string </td><td>white" </td><td>Colour for window background, specified as in the "Type" stanza.  </td></tr>
<tr>
<th>"colour-alignment" </th><td>string </td><td>"white" </td><td>Colour for each alignment background, specified as in the "Type" stanza.  </td></tr>
<tr>
<th>"colour-block" </th><td>string </td><td>"white" </td><td>Colour for each block background, specified as in the "Type" stanza.  </td></tr>
<tr>
<th>"colour-m-forward" </th><td>string </td><td>"white" </td><td>Colour for forward strand column group background in master alignment, specified as in the "Type" stanza.  </td></tr>
<tr>
<th>"colour-m-reverse" </th><td>string </td><td>"white" </td><td>Colour for reverse strand column group background in master alignment, specified as in the "Type" stanza.  </td></tr>
<tr>
<th>"colour-q-forward" </th><td>string </td><td>"light pink" </td><td>Colour for forward strand column group background in matched alignment, specified as in the "Type" stanza.  </td></tr>
<tr>
<th>"colour-q-reverse" </th><td>string </td><td>"pink" </td><td>Colour for reverse strand column group background in matched alignment, specified as in the "Type" stanza.  </td></tr>
<tr>
<th>"colour-m-forwardcol" </th><td>string </td><td>"white" </td><td>Colour for forward strand column background in master alignment, specified as in the "Type" stanza.  </td></tr>
<tr>
<th>"colour-m-reversecol" </th><td>string </td><td>"white" </td><td>Colour for reverse strand column background in master alignment, specified as in the "Type" stanza.  </td></tr>
<tr>
<th>"colour-q-forwardcol" </th><td>string </td><td>"light pink" </td><td>Colour for forward strand column background in matched alignment, specified as in the "Type" stanza.  </td></tr>
<tr>
<th>"colour-q-reversecol" </th><td>string </td><td>"pink" </td><td>Colour for reverse strand column background in matched alignment, specified as in the "Type" stanza.  </td></tr>




<tr> <th>colour-separator </th> <td>string</td> <td> </td> <td> </td> </tr>
<tr> <th>colour-item-mark </th> <td>string</td> <td> light blue</td> <td> </td> </tr>

<tr> <th>colour-column-highlight </th> <td>string</td> <td> grey</td> <td> </td> </tr>
<tr> <th> colour-item-highlight</th> <td>string</td> <td> light grey</td> <td> </td> </tr>
<tr> <th> colour-frame-0</th> <td>string</td> <td> red</td> <td> </td> </tr>
<tr> <th>colour-frame-1 </th> <td>string</td> <td> deep pink</td> <td> </td> </tr>
<tr> <th>colour-frame-2 </th> <td>string</td> <td> light  pink</td> <td> </td> </tr>

<tr> <th>"colour-masked-feature-fill" </th><td>string </td><td>(none) </td><td>Fill colour for masked feature (nominally an EST). </td></tr>
<tr> <th>"colour-masked-feature-border" </th><td>string </td><td>(none) </td><td>Border colour for masked feature (nominally an EST). </td></tr>

<tr> <th> colour-evidence-border</th> <td>string</td> <td> darek grey</td> <td>Highlight border colour for evidence features for selected transcript </td> </tr>
<tr> <th> colour-evidence-fill</th> <td>string</td> <td>light grey </td> <td>Highlight fill colour for evidence features for selected transcript </td> </tr>

</tbody></table>

</fieldset>

<a name="debug"></a>
<fieldset><legend>Debugging Options</legend>
You should only use these if you are a developer as they can impact the
performance of ZMap significantly or cause it to write large amounts of
data to stdout.<p>
</p><table border="1" cellpadding="3" cellspacing="3">
<tbody><tr>
<th>Stanza </th><th colspan="3" align="center&gt;">"debug"  </th></tr>
<tr>
<th>Keyword </th><th>Datatype </th><th>Default </th><th>Description  </th></tr>
<tr>
<th>"threads" </th><td>Boolean </td><td>false </td><td>Turns on/off debug output for the threading sections of ZMap.  </td></tr>
<tr>
<th>"feature2style" </th><td>Boolean </td><td>false </td><td>Turns on/off debug output for mapping featuresets to styles.  </td></tr>
<tr>
<th>"styles" </th><td>Boolean </td><td>false </td><td>Turns on/off debug output for style definitions.  </td></tr>
</tbody></table>
</fieldset>

<a name="align"></a>
<fieldset><legend>Multiple Alignment Options</legend>
ZMap can display multiple alignments, each alignment can contain
multiple blocks. This stanza specifies which blocks in which alignment
match each other. Note that all parameters are mandatory otherwise zmap
will not know how to display the blocks.<p>
</p><table border="1" cellpadding="3" cellspacing="3">
<tbody><tr>
<th>Stanza </th><th colspan="3" align="center&gt;">"align"  </th></tr>
<tr>
<th>Keyword </th><th>Datatype </th><th>Default </th><th>Description  </th></tr>
<tr>
<th>"reference_seq" </th><td>String </td><td>Mandatory </td><td>Name of
the "master" or reference sequence, this sequence is shown on the right
of the window and blocks in other alignments are aligned to it. </td></tr>
<tr>
<th>"reference_start" </th><td>int </td><td>Mandatory </td><td>Start position of a block in the reference sequence.  </td></tr>
<tr>
<th>"reference_end" </th><td>int </td><td>Mandatory </td><td>Start position of a block in the reference sequence.  </td></tr>
<tr>
<th>"reference_strand" </th><td>int </td><td>Mandatory </td><td>Which strand of the reference sequence is being aligned, 1 means forward strand, -1 means reverse.  </td></tr>
<tr>
<th>"non_reference_seq" </th><td>String </td><td>Mandatory </td><td>Name
of the "master" or non reference sequence, this sequence is shown on
the right of the window and blocks in other alignments are aligned to
it. </td></tr>
<tr>
<th>"non_reference_start" </th><td>int </td><td>Mandatory </td><td>Start position of a block in the non reference sequence.  </td></tr>
<tr>
<th>"non_reference_end" </th><td>int </td><td>Mandatory </td><td>Start position of a block in the non reference sequence.  </td></tr>
<tr>
<th>"non_reference_strand" </th><td>int </td><td>Mandatory </td><td>Which strand of the non reference sequence is being aligned, 1 means forward strand, -1 means reverse.  </td></tr>
</tbody></table>
</fieldset>

<a name="blixem"></a>
<fieldset><legend>Blixem Options</legend>
ZMap can show multiple alignments using the blixem program, this stanza tells zmap how to find and run blixem.<p>
</p><table border="1" cellpadding="3" cellspacing="3">
<tbody><tr>
<th>Stanza </th><th colspan="3" align="center&gt;">ZMAPSTANZA_ALIGN_CONFIG   </th></tr>
<tr>
<th>Keyword </th><th>Datatype </th><th>Default </th><th>Description  </th></tr>
<tr>
<th>"netid" </th><td>String </td><td>Mandatory </td><td>The network id
of the machine running pfetch from which blixem will retrieve the
sequences to be shown in the multiple alignement. </td></tr>
<tr>
<th>"port" </th><td>int </td><td>Mandatory </td><td>The port number on the "netid" machine for the pfetch server.  </td></tr>
<tr>
<th>"script" </th><td>String </td><td>Mandatory </td><td>The name of
the blixem program, this could be a shell script which sets up some
environment and then starts blixem or indeed another multiple alignment
display program. </td></tr>
<tr>
<th>"scope" </th><td>Int </td><td>40000 </td><td>The span around the selected feature about which blixem will get and display data for the multiple alignment.  </td></tr>
<tr>
<th>"homol_max" </th><td>Int </td><td>???? </td><td>The maximum number of homologies displayed ?? CHECK THIS....  </td></tr>

<th>"config-file" </th><td>int </td><td></td><td> The name of the blixem config file </td></tr>
<th>"file-format" </th><td>int </td><td></td><td>  </td></tr>
<th>"keep-tempfiles" </th><td>int </td><td></td><td> Don't erase temporary files on exit </td></tr>
<th>"kill-on-exit" </th><td>int </td><td></td><td> Kill Blixem when ZMap exits </td></tr>
<th>"dna-featuresets" </th><td>int </td><td></td><td> Which featuresets to search </td></tr>
<th>"protein-featuresets" </th><td>int </td><td></td><td>  Which featuresets to search </td></tr>
<th>"transcript-featuresets" </th><td>int </td><td></td><td>  Which featuresets to search </td></tr>

</tbody></table>
</fieldset>

