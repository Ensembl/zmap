<!--#set var="banner" value="zmap_build.sh"-->
<!--#include virtual="/perl/header"-->

<!--#set var="author" value="edgrif@sanger.ac.uk" -->


<!-- some colours for our boxes etc. -->
<style>

pre{ background-color: #DDDDDD; border-style: solid; border-width: 1px; padding: 10px }

.request{ border-color: red;  border-width: medium }
.response{ border-color: green; border-width: medium }
.message{ border-color: blue; border-width: medium }

table.zmap_actions{ background-color: #EFEFEF; border-width: 1px; border-style: solid; border-collapse: collapse }
table.zmap_actions td{ border-width: 0px 1px 1px 0px; border-style: solid; padding: 2px }
table.zmap_actions tr{ vertical-align: top; }
table.zmap_actions th{ border-width: 0px 0px 1px 0px; border-style: solid; }

fieldset
{
background-color: lightblue;
border-style: solid; border-width: 3px; border-color: black;
padding: 10px
}

legend{ font-weight: bold }

</style>



<h1>The ZMap Build System</h1>


<h2>Overview</h2>

<p>There are three major tasks for the zmap build system:</p>

<ol>
  <li> <a href="#day_to_day">Compiling zmap during day to day development.</a></li>
  <li> <a href="#dist">Building a full zmap distribution.</a></li>
  <li> <a href="#install">Installing zmap from a distribution file.</a></li>
</ol>


<p>Compiling zmap involves the developer in initially running the autoconf tools to create
the right makefiles and thereafter simply running make to rebuild zmap.</p>

<p>Building a distribution is done via one of a number of scripts which do all the work
for the developer to produce a distribution. This includes checking out code or using an
existing checkout, compiling on several different platforms, optionally preparing documentation,
repository tagging and much else.</p>

<p>Installing involves gunzipping/untarring the distribution file for ZMap and then running
the ./configure script with the right parameters to build zmap. It may also involve installing
various zmap dependencies, some of which are distributed with zmap.</p>

<p>This document describes these tasks in detail.</p>


<p>In addition there are some appendices giving more details of various aspects of the
build system:</p>

<ol>
  <li> <a href="#build_scripts">Build Script Details.</a></li>
  <li> <a href="#code_version">The Code Version System.</a></li>
</ol>

<h2>New Methodology (hot off the press 21 Nov 2011)</h2>
(cut and paste from an email: will be tidied up shortly)

<pre>
Malcolm,


with all the messing about with different machines/different branches I found a few bugs that were simply to do with things getting out of synch in our main build system.

I've changed it a bit in a way that I hope will avoid the getting out of synch and make things a bit easier.

To do the build you now need to:

> ssh -l zmap tviewsrv            (or whichever main machine we settle on)

> cd BUILD_CHECKOUT

> ./zmap_master_build

by default this will do a develop branch build, options are:


-d            development build
-o            overnight build
-p            production build
-r <sub_branch>        release branch, where sub_branch is the last part of=
            release branch, e.g. Release_0_1_138

The script does a clone of the appropriate branch, cd's into that clone and runs the appropriate build script which will deal with the sync problems. Otherwise the build is unaltered in the way it runs.


If you list BUILD_CHECKOUT you will see copies of zmap_functions.sh and zmap_master_build, we will need to update these by hand if they get changed but that shouldn't be too onerous....

The build script does a git clone into BUILD_CHECKOUT/ZMap and this is removed if the build is successful so you may need to remove the ZMap directory if it fails for some reason. It's all pretty straightforward though.


Ed
</pre>

<a name="day_to_day"></a>
<h2>1) Day to day Compiling of ZMap</h2>


<p>Assuming that you have a copy of the ZMap source code as ./ZMap then:</p>


<pre>
1) Use the autoconf tools to create the makefiles for compiling zmap:

&gt; cd ZMap/src

&gt; ./bootstrap
</pre>

<p>The bootstrap script runs a number of tools from the autoconf package
to create the configure script, the bootstrap script will in the end be
replaced by the standard autoreconf script which is now part of the autoconf
package.</p>


<pre>
2) Run the ./configure script:

&gt; cd build/XXXXX           # Where XXXXX is 'linux', 'macosx' etc.

&gt; ../../runconfig
</pre>

<p>The runconfig script encapsulates common parameters required to run the
./configure script on the various platforms, e.g. on the Mac the
includes/libraries required by zmap are found in /opt/local, and passes them to configure.</p>

<pre>
3) Run the make:

&gt; make
</pre>

<p>You should now find that you have a zmap executable in your current directory. To test
the excutable simply run it with the --version argument:</p>

<pre>
&gt; ./zmap --version
ZMap - 0.1.132
&gt;
</pre>


<p><b>NOTE</b> bootstrap and runconfig must be rerun each time a new source file is added to
the code or each time the build is done on a new machine. While not strictly necessary it
is cleaner to run the make "distclean" target before bootstrap/runconfig when compiling
on a different machine:</p>

<pre>
&gt; cd ZMap/src/build/&lt;curr_build_dir&gt;

&gt; make distclean

&gt; cd ../../                  # back to 'src' directory

&gt; ./bootstrap

&gt; cd build/&lt;new_build_dir&gt;

&gt; ../../runconfig

&gt; make
</pre>




<a name="dist"></a>
<h2>2) How to make a distribution</h2>

<p>Making distributions is done as the zmap user on the master build machine
(currently tviewsrv). Usual practice is to ssh into tviewsrv as zmap:</p>

<pre>
&gt; ssh -l zmap tviewsrv
</pre>

<p>This ensures that you are logged in to the right machine with the correct environment.</p>

<p>There are scripts to do several different kinds of distribution build and
they should all be run from a checkout of the ZMap respository. There is one
for this use in <b>~zmap/BUILD_CHECKOUT</b>:</p>

<pre>
&gt; cd ~/BUILD_CHECKOUT/ZMap/scripts
&gt; ls
Author			    build_config.tviewsrv.sh	set_dev_description.pl	      zmap_handle_release_tar.sh
CopyRight		    build_run.sh		setup_libs_otter.sh	      zmap_machine_perf.sh
CopyRight.txt		    buildaceconn		versioner		      zmap_make_SOURCES_list.sh

etc. etc.

build_config.mac18480i.sh   methods2style.pl		zmap_foocanvas_tasks.sh       zmap_x11_helper.sh
build_config.mpb101217i.sh  process_rt_tickets_file.pl	zmap_functions.sh
build_config.sh		    process_stack_dump.pl	zmap_functions_web.sh
</pre>


<p>Before running any of the scripts the script directory should be updated from
the code repository to ensure the latest versions of the scripts are used:</p>

<pre>
&gt; ./zmap_update_run
</pre>

<p> This script can also take as an argument the name of the build script to be run
(and any args that the build script needs) and it will then run the script
after doing an update:</p>

<pre>
&gt; ./zmap_update_run ./zmap_build_one_off.sh

============= Starting update of current directory from git
remote: Counting objects: 7, done.
remote: Compressing objects: 100% (4/4), done.
remote: Total 4 (delta 3), reused 0 (delta 0)
Unpacking objects: 100% (4/4), done.
From git.internal.sanger.ac.uk:/repos/git/annotools/zmap
   32393db..e0c682c  develop    -> origin/develop
Updating 32393db..e0c682c
Fast-forward
 scripts/build_run.sh |   25 ++++++++++---------------
 1 files changed, 10 insertions(+), 15 deletions(-)
============= Finished update

============= Started './zmap_build_one_off.sh' with args: ''
[build_run.sh (16:29:58)] ZMap ONE_OFF_BUILD Build Started
[build_run.sh (16:29:58)] Build parameters are

        Running on: 'tviewsrv'
      Build script: '/nfs/users/nfs_z/zmap/BUILD_CHECKOUT/ZMap/scripts/build_bootstrap.sh'
      Build_prefix: 'ONE_OFF_BUILD'
   Command options: '    RELEASE_LOCATION=/nfs/users/nfs_z/zmap/BUILDS/ONE_OFF_BUILD'
        Global log: '/nfs/users/nfs_z/zmap/BUILDS/ONE_OFF_BUILD.LOG'
Errors reported to: 'edgrif@sanger.ac.uk'

<font color="red">[build_run.sh (16:29:58)] Pausing for 15 seconds, hit Cntl-C to abort cleanly. ****</font>
[build_run.sh (16:30:13)] Build now running and cannot be cleanly aborted...
[build_run.sh (16:40:57)] ZMap ONE_OFF_BUILD Succeeded
============= Finished './zmap_build_one_off.sh'

&gt;
</pre>

<p><font color="red">****</font> The build scripts all launch jobs on other
machines via ssh, you are given a chance to interrupt the build script before
this happens but after that the script cannot be interrupted to ensure that the
remote jobs are cleaned up correctly (see text in red in above output).</p>

<p>The build takes some time to complete mainly depending on how busy the Sanger network is. On completion
the build scripts write to the terminal and to a log file but also mail the zmap developers to give the
result of the build:</p>

<pre>
Date: Wed, 25 May 2011 15:45:17 +0100
From: Zmap developers <zmap@sanger.ac.uk>
To: edgrif@sanger.ac.uk
Subject: ZMap ONE_OFF_BUILD Succeeded

[root_checkout.sh (15:45:17)] Binary reports version=ZMap - 0.1.132
[root_checkout.sh (15:45:17)]
[root_checkout.sh (15:45:17)] Results:
[root_checkout.sh (15:45:17)] --------
[root_checkout.sh (15:45:17)] Build run on  tviewsrv mac18480i cbi4e
[root_checkout.sh (15:45:17)] Version according to binaries should be 0-1-132
[root_checkout.sh (15:45:17)] Binaries, code, doc, dist etc can be found in
/nfs/users/nfs_z/zmap/BUILDS/ONE_OFF_BUILD
[root_checkout.sh (15:45:17)] For more information see
/nfs/users/nfs_z/zmap/BUILDS/ONE_OFF_BUILD/README
[root_checkout.sh (15:45:17)] --------
[root_checkout.sh (15:45:17)] Successfully reached last line of script!
</pre>



<p>If the build worked the results will be in:</p>

<pre>
~zmap/BUILDS/<b>XXXXXXX</b>
</pre>

<p>where <b>XXXXXXX</b> depends on which build script was run, e.g. DEVELOPMENT.</p>

<p>Each distribution has the following contents:</p>

<pre>
<font color="red">Copies of the master and slave build trees</font>
  drwxr-xr-x 11 zmap zmap   4096 May 25 14:22 ZMap
  drwxr-xr-x 11 zmap zmap   4096 May 25 14:31 ZMap.cbi4d
  drwxr-xr-x 11 zmap zmap   4096 May 25 14:28 ZMap.mac18480i
  drwxr-xr-x 11 zmap zmap   4096 May 25 14:25 ZMap.tviewsrv

<font color="red">Links to the build products in the build trees</font>
  lrwxrwxrwx  1 zmap zmap     26 May 25 14:33 Darwin_i386 -> ZMap.mac18480i/prefix_root
  lrwxrwxrwx  1 zmap zmap     25 May 25 14:33 Linux_i686 -> ZMap.tviewsrv/prefix_root
  lrwxrwxrwx  1 zmap zmap     22 May 25 14:33 Linux_x86_64 -> ZMap.cbi4d/prefix_root

<font color="red">autoconf "dist" files for zmap and packages it depends on</font>
  drwxr-xr-x  2 zmap zmap   4096 May 25 14:25 Dist

<font color="red">README for this zmap build</font>
  -rw-r--r--  1 zmap zmap   2001 May 25 14:33 README

<font color="red">Build logs for individual build machines</font>
  -rw-r--r--  1 zmap zmap 480284 May 25 14:31 cbi4d.log
  -rw-r--r--  1 zmap zmap 380025 May 25 14:28 mac18480i.log
  -rw-r--r--  1 zmap zmap 391869 May 25 14:25 tviewsrv.log
</pre>


<p>Users on Sanger systems can use the binaries from the build product directories, for
users who need to build their own zmap all the dist files they require are in the Dist
subdirectory.</p>


<h3>The Different Types Of Distribution Build</h2>

<p>The distribution build scripts are all prefixed with "zmap_build_", their purpose/usage is
summarised in the following table:</p>

<table border cellpadding=10>
  <tr>
    <th>Script</th>
    <th>GIT Branch Used</th>
    <th>Purpose</th>
    <th>New Release ?</th>
  </tr>
  <tr>
    <td>zmap_build_overnight.sh</td>
    <td>develop</td>
    <td>Run from cron job as daily build test.</td>
    <td>No</td>
  </tr>
  <tr>
    <td>zmap_build_one_off.sh</td>
    <td>develop</td>
    <td>Run to produce a one off build with no tagging etc.</td>
    <td>No</td>
  </tr>
  <tr>
    <td>zmap_build_development.sh</td>
    <td>develop</td>
    <td>Produces a build of the current develop branch.</td>
    <td>No</td>
  </tr>
  <tr>
    <td>zmap_build_feature.sh</td>
    <td>feature_XXXX</td>
    <td>Produces distribution from a particular feature branch.</td>
    <td>No</td>
  </tr>
  <tr>
    <td>zmap_build_release.sh</td>
    <td>release</td>
    <td>Produce a release build for testing/fixing prior to making a production build.</td>
    <td>Preparation</td>
  </tr>
  <tr>
    <td>zmap_build_production.sh</td>
    <td>production</td>
    <td>Produce a production build with repository tagging, full docs etc.</td>
    <td>Yes</td>
  </tr>
</table>

<p>"New Release" implies incrementing the release number and producing and saving release
notes to the repository.</p>

<h3>"Development" Builds</h2>

<p>Development builds are made from the "develop" branch in the ZMap git repository. Use
the following to make a development build:</p>


<pre>
&gt; ./zmap_update_run ./zmap_build_development.sh
</pre>

<p>Once the build has finished the results will be in ~zmap/BUILDS/DEVELOPMENT_BUILDS</p>




<h3>"Release" Builds</h2>

<p>The release build is branch from develop, it's made when we think are ready
for a new release of zmap. Release branches must only have bug fixes made in
them. Once complete they are merged into production and back into develop (to
ensure bug fixes get into develop !). Once this is done the release branch
can be deleted.</p>

<pre>
&gt; ./zmap_update_run ./zmap_build_release.sh
</pre>

<p>Once the build has finished the results will be in ~zmap/BUILDS/RELEASE_BUILDS</p>


<h3>"Production" Builds</h2>

<p>Production builds are made after a release branch has been merged into production
and the production branch has been tagged. The build includes release notes.</p>

<pre>
&gt; ./zmap_update_run ./zmap_build_production.sh
</pre>

<p>Once the build has finished the results will be in ~zmap/BUILDS/PRODUCTION_BUILDS</p>



<h3>Using particular dependency Versions</h2>

<p>To use a particular acedb release (assuming bash):</p>

<pre>
&gt; ZMAP_ACEDB_RELEASE_DIR=2009_10_20 ; ./zmap_do_build.sh
</pre>

<p>To use a particular seqtools release (assuming bash):</p>

<pre>
&gt; ZMAP_SEQTOOLS_RELEASE_CONTAINER=XXXXX ; ./zmap_do_build.sh
</pre>


<h3>Overnight Build</h2>

<p>zmap_overnight.sh is run as a cron job on the central build machine
(currently tviewsrv) as the zmap userid. The cron invocation is:</p>

<pre>
00 23 * * * ~/prefix/scripts/zmap_overnight.sh > ~/BUILDS/cron.log 2>&1
</pre>

<p>Note that cron.log congtains any errors that might occur before builds log
file gets created.</p>


<a name="install"></a>
<h2>3) Installing ZMap</h2>

<p>This section covers the installation of zmap and its dependencies on linux
and Mac systems. The first part of the document covers building and installing
ZMap assuming that all of the dependencies have been installed. Later
sections cover installing the dependencies themselves.</p>


<h3>Compiling ZMap and producing a dist file</h3>

<pre>

1) run the script to create the ./configure script:

> cd ZMap/src
> ./bootstrap


2) Run the ./configure via the runconfig script:

for linux
> cd build/linux

or for the mac
> cd build/mac

then
> ../../runconfig


3) Run the make

> make


4) create a distribution file

> make dist

</pre>


<h3>Using the dist file from the build</h3>

<p>Having run 'make dist' to make the tar.gz file...</p>

<pre>
1) gunzip and untar the file.

2) cd zmap-V-R-U

3) run ./configure as follows:


For Sanger linux machines:

setenv PKG_CONFIG_PATH /software/acedb/lib/pkgconfig/
./configure --prefix=/software/acedb CFLAGS="-I/software/acedb/include" CPPFLAGS="-I/software/acedb/include" LDFLAGS="-L/software/acedb/lib"


For Macport Mac machines:

setenv PKG_CONFIG_PATH /opt/local/lib/pkgconfig/
./configure --prefix=/opt/local CFLAGS="-I/opt/local/include"  CPPFLAGS="-I/opt/local/include" LDFLAGS="-L/opt/local/lib"

</pre>




<h2>Installing ZMap's Dependencies</h2>


<h3>AceConn Install</h3>

<pre>
For a MacPorts /opt/local system glibtoolize and the path to aclocal
need to be set as environment variables before bootstrapping and building:

> export LIBTOOLIZE=glibtoolize

> export AC_LOCAL_INC=/opt/local/share/aclocal


and then for all systems:

> bootstrap -b

> ./configure --prefix=/opt/local

> make

> sudo make install

</pre>



<h2>MacPort Install</h2>



<pre>

MacPort Install
---------------

MacPorts resides at http://www.macports.org/ and is a website providing code
and utilities for installing common unix programs on a Mac OS X system.

MacPorts requires XCode and requires it at a very current level, XCode is
however a large package so we should probably have a copy on a CD for local
installs. NOTE that MacPorts won't install without the right level of XCode on
the system.



Installation directory:

By default macports builds stuff in /opt/local, this could be changed to
/usr/local but I didn't bother. If the desitination directory is left like this
then it's crucial to make sure that during installing/building your PATH has
/opt/local/bin and /opt/local/sbin ahead of /usr/local so the right versions of
aclocal etc etc are picked up. The initial setup of macports tries to do the
right thing by adding this to your path in your .cshrc (or whatever shell you
use).



Initial install of the MacPort utilities:


1) Follow the instructions here to install the macports utilities

http://www.macports.org/install.php


2) Set the following environment variables

setenv http_proxy http://wwwcache.sanger.ac.uk:3128
setenv http-proxy-host wwwcache.sanger.ac.uk
setenv http-proxy-port 3128

(Note I'm not sure all of these are needed...)


3) Edit the .subversion/servers file to include the following lines in the
[global] section:

http-proxy-host = wwwcache.sanger.ac.uk
http-proxy-port = 3128


3) Follow the instructions here to sync the MacPorts utilities and any
ports already installed:

http://trac.macports.org/wiki/howto/SyncingWithSVN

Add this line to the sources.conf looks like this:

file:///opt/local/var/macports/sources/svn.macports.org/trunk/dports/



You can then use the "port install" command to install packages as required.

</pre>


<pre>


MacPorts GTK Install
--------------------

This document describes the packages that need to be installed to allow
development with the autoconf and GTK packages with some additional graphics
packages required for zmap/acedb development.

NOTE: It is assumed that the MacPorts utilities have been installed and that
macports is installing into /opt/local.


1) Install GTK

> sudo port install gtk2


2) Install libtool and libtool-devel packages

> port install libtool

> port install libtool-devel


3) Install "check" utility

> port install check



4) Install libgd

This package is needed by libg2 (see next item), it is not currently supported
in macports so needs to be separately downloaded from the website:

http://www.libgd.org/Downloads


The downloaded file then needs to be gunzip'd and untar'd and then installed:

> ./configure --prefix=/opt/local CPPFLAGS="-I/opt/local/include -I./" LDFLAGS="-L/opt/local/lib"

> make

> sudo make install



5) Install libg2

As with libgd this package is not supported by MacPorts and can be downloaded from:

http://sourceforge.net/projects/g2/


The downloaded file then needs to be gunzip'd and untar'd and then installed:

./configure --prefix=/opt/local CFLAGS="-I/opt/local/include"  CPPFLAGS="-I/opt/local/include" LDFLAGS="-L/opt/local/lib"

> make depend

> make

Once the make has finished then check that you see "GD" support:

Supported devices:
    PostScript
    FIG
    X11
    Xdbe
    GD              &lt;------ These two are vital !!
    GD (GIF)        &lt;------

> sudo make install



and that's it.


</pre>



<h2>Appendix</h2>

<a name="build_scripts"></a>
<h3>1) Details Of The ZMap Build Scripts</h2>

<p>This text was taken from the original README file in <b>ZMap/scripts</b> and
has been updated in an effort to make it more current and more readable.</p>

<p>The zmap build scripts are to be found in the <b>ZMap/scripts</b> sub directory.
The directory contains some scripts that are also used by the build scripts
in <b>ZMap/src</b> for configuration: build_config.sh and the associated build.XXXX
scripts.</p>


<h4>Scripts: overview</h4>


<p>Most of the scripts are run by hand but zmap_build_overnight.sh is run from
a cron job to care should be taken in altering it (and the scripts it calls).</p>


<p>If you add scripts to this directory then here are some points to note:</p>

<ol>
  <li><p>scripts must either be perl or bash, i.e. not sh, csh, awk or ksh.</p></li>

  <li><p>If you write a bash script then you should make use of the general
      functions and variables in the  ZBfunctions script file.  This file is
      now being  phased out  in favour of  a separate  zmap_functions.sh and
      build_config.sh.  zmap_functions.sh holds the common functions as
      ZBfunctions did, but not the variables.  The build_config.sh and its
      fellows take care of the setting of common variables now.</p></li>

  <li><p>The scripts get copied to ~zmap/prefix/scripts which the zmap
      developers and the zmap userid have on their path. While this is where your
      script will be found, you should not assume that this is where your script
      will be running from.</p></li>

  <li><p>pipes over ssh are utilised quite a bit in the build_bootstrap.sh script.
      These can be spotted as code that looks similar to</p>

      <pre>
      cat $script | ssh $host '/bin/bash -c "\
      cd /var/tmp                  || exit 1;\
      cat - > host_checkout.sh     || exit 1;\
      chmod 755 host_checkout.sh   || exit 1;\
      ./host_checkout.sh           || exit 1;\
      rm -f host_checkout.sh       || exit 1;\
      "' > $host.log 2>&1
      </pre>

      <p>This enables 3 important features:</p>
      <ul>
	<li> a reasonably atomic run of the script on the remote host
	<li> no dependecies on the remote host
	<li> complete, simple logging of events on the remote host
      </ul></li>
</ol>

<p>The build scripts all have the same call sequence:</p>

<pre>
zmap_build_XXXXX.sh --> build_run.sh --> build_bootstrap.sh


zmap_build_XXXXX.sh - simple flag/parameter setting scripts for different build types

       build_run.sh - sets up environment (logging, build parameters etc) and then
                      launches the build and handles reporting the result.

 build_bootstrap.sh - checks out or copies code, builds release notes, builds the code
                      on the different build machines, constructs the distribution from
                      all the build results.

</pre>


<h4>Scripts: code building</h4>

<p>Building the code is a sub-part of the distribution build process
and itself consists of a number of stages:</p>

<pre>
developer run build:

src/bootstrap -> scripts/build_config.sh \
  -> scripts/build_config.&lt;mach_type&gt;.sh -> scripts/build_config.&lt;node&gt;.sh


or from the automated/master builds:

scripts/build_bootstrap.sh -> src/bootstrap \
  -> scripts/build_config.sh -> scripts/build_config.&lt;mach_type&gt;.sh \
     -> scripts/build_config.&lt;node&gt;.sh

</pre>


<p>While this seems complex it allows overriding for machine type and then for
particular nodes, we need this flexibility to deal with amongst other things
differing levels of gtk on different machines.</p>

<p>NOTE that it's a bit confusing to have all this in different directories,
but it is more convenient for the developer in their day to day work.</p>



<h4>Scripts: distribution building</h4>


<p>Over time scripts have become obsolete or restructured or renamed, some of
this work is ongoing.</p>


<p>In particular configuration via the ZBfunctions "dot-script" method didn't
work very well on mulitple machine architectures.  It has been replaced with
zmap_functions.sh and build_config.sh.  build_config.sh tries to load
build_config.$(uname).sh and build_config.$(hostname -s).sh to be more flexible
in terms of architecture and machine configuration differences. This is
combined with a small number of cover scripts (zmap_build_XXXX.sh) to do the
various types of build.</p>







Scripts cover the following tasks:

<table border cellpadding=10>
  <tr>
    <th>Task</th>
    <th>Script</th>
  </tr>

  <tr>
    <td>Get lastest CVS copy of Ace-Con package
	used by zmap, compile and put libs in
	correct ~zmap/prefix/XXXX/lib dirs.</td>

    <td>buildaceconn</td>
  </tr>


  <tr>
    <td>Make a zmap release directory containing
	a consistent set of zmap and acedb binaries
	from ~zmap/prefix/XXXX/bin</td>

    <td>zmap_build_release.sh</td>
  </tr>

  <tr>
    <td>Copy the required acedb binaries from an
	acedb release directory into ~zmap/prefix/XXXX/bin</td>
    <td>zmap_fetch_acedbbinaries.sh</td>
  </tr>

  <tr>
    <td>Interrogate/Set release version of zmap source code</td>
    <td>versioner</td>
  </tr>

  <tr>
    <td>Set up common functions/variables for all scripts
	in this directory. (deprecated)</td>

    <td>ZBfunctions</td>
  </tr>

  <tr>
    <td>Update ~zmap/prefix/scripts to latest code and
	optionally run a command using the shell script.
	Can be run as a cron job... Care needed when editing.</td>
    <td>zmap_build_development.sh</td>
  </tr>

  <tr>
    <td>Update ~zmap/prefix/scripts to latest code and
	optionally run a command using the shell script.
	Can be run as a cron job... Care needed when editing.</td>
    <td>zmap_build_overnight.sh</td>
  </tr>
  <tr>
    <td>Do a complete build of zmap on various machines
	using ssh. </td>
    <td>build_bootstrap.sh</td>
  </tr>

  <tr>
    <td>Produce zmap documentation for website etc. </td>
    <td>zmap_make_docs.sh</td>
  </tr>

  <tr>
    <td>Set symbolic links in ~zmap that point to
	OVERNIGHT, DEVELOPMENT & RELEASE dirs.</td>
    <td>zmap_symlink.sh</td>
  </tr>

  <tr>
    <td>Compile zmap on a specific machine and
	optionally test that it runs.</td>
    <td>zmap_compile_and_tar.sh</td>
  </tr>

  <tr>
    <td>Update the zmap web development site and
	optionally update the external website.</td>
    <td>zmap_update_web.sh</td>
  </tr>
</table>




<h4>The versioner script</h4>

<p>Here's how to get the version number for setting up a directory name...this is already
in the script.</p>

<pre>
&gt; versioner -path $HOME/ZMap/ZMap/src/include/ZMap/ -show -V -quiet
0-1-3
&gt;
</pre>

<p>heres how to get the tag....</p>

<pre>
&gt; versioner -path $HOME/ZMap/ZMap/src/include/ZMap/ -show  -quiet
RELEASE_0-1-3
&gt;
</pre>

<p>the script can also tag the whole of cvs...</p>

<pre>
&gt; versioner -path <your ZMap directory> -tag -increment -update -cvs
</pre>


<p>It can also be used to increment any file containing the zmap version strings such as
ZMap/src/include/ZMap/zmapXRemote.h, to do this on a locally cvs edited file without
tagging cvs etc do this:</p>

<pre>
&gt; versioner -increment -update -path <your ZMap directory> -file src/include/ZMap/zmapXRemote.h

e.g.

&gt; versioner -increment -update -path /nfs/team71/acedb/edgrif/ZMap/ZMap_Curr/ZMap/ -file src/include/ZMap/zmapXRemote.h
Using '/nfs/team71/acedb/edgrif/ZMap/ZMap_Curr/ZMap' as Checkout Directory.
The CVS tag should be RELEASE_1-1-3.
RELEASE_1-1-3
Local Version is now RELEASE_1-1-4, previous version in /nfs/team71/acedb/edgrif/ZMap/ZMap_Curr/ZMap/src/include/ZMap/zmapXRemote.h.backup
&gt;
</pre>




<a name="code_version"></a>
<h2>2) The Code Version System</h2>

<p>The code version built into the zmap executable needs to be updated not only
every time the offical version number is incremented but also for development
versions every time the git checksum changes because we use this checksum
to identify different builds. This checksum will be different
for developers working on different code branches and at different stages of
development on the same branch. We employ the following method to avoid having
these latter changes constantly checked into the zmap repository:</p>


<p><b>src/Makefile.am</b> contains our own 'build-version-file' target that creates a
source file (src/zmapUtils/zmapVersion.c) and ensures that file is compiled for
every make. During creation the version string is updated with the git checksum id but also
updates the make compile time. Because make generates this file it does not
need to be in the repository.</p>

<p>NOTE that making 'build-version-file' a dependency
of targets like 'all' and 'dist' is not straight forward and is documented in
src/Makefile.am where 'build-version-file' is specified. You will see warnings like
these:</p>

<pre>
make -k
Makefile:1292: warning: overriding commands for target `all'
Makefile:533: warning: ignoring old commands for target `all'
</pre>


<p><b>src/zmapUtils/Makefile.am</b> specifies src/zmapUtils/zmapVersion.c as a source
file that should be included in the build, this makes sure it gets compiled and
linked and is included in the dependency lists etc.</p>


<p><b>src/zmapUtils/zmapUtils.c</b> functions have been slightly rewritten to make use
of the functions in src/zmapUtils/zmapVersion.c to get the version string and compile time.</p>


<!--#include virtual="/perl/footer"-->


