<!--#set var="banner" value="zmap_build.sh"-->
<!--#include virtual="/perl/header"-->

<!--#set var="author" value="edgrif@sanger.ac.uk" -->


<!-- some colours for our boxes etc. -->
<style>

pre{ background-color: #DDDDDD; border-style: solid; border-width: 1px; padding: 10px }

.request{ border-color: red;  border-width: medium }
.response{ border-color: green; border-width: medium }
.message{ border-color: blue; border-width: medium }

table.zmap_actions{ background-color: #EFEFEF; border-width: 1px; border-style: solid; border-collapse: collapse }
table.zmap_actions td{ border-width: 0px 1px 1px 0px; border-style: solid; padding: 2px }
table.zmap_actions tr{ vertical-align: top; }
table.zmap_actions th{ border-width: 0px 0px 1px 0px; border-style: solid; }

fieldset
{
background-color: lightblue;
border-style: solid; border-width: 3px; border-color: black;
padding: 10px
}

legend{ font-weight: bold }

</style>



<h1>The ZMap Build System Files</h1>


<h2>Overview</h2>

<p>ZMap uses the autoconf system to produce system-specific makefiles with which to
build zmap. This system while powerfull is complex and more so because zmap's use of
autoconf has grown through experimentation rather than from a sound knowledge of
autoconf which is a very large tool.</p>

<p><b>When reading this document you must remember that zmap's use of autoconf may be
less than optimal or just wrong, if you see things that can be simplified and made
more easy to understand then get on with it BUT document the way the modified system
works in this file !</b></p>

<p>The following sections document the system and how to make some more common
modifications to it:</p>


<ul>
  <li><p><a href="#adding_autoconf_packages">How To Add Other Autoconf Packages Into The Zmap Build System</a>
      Covers adding other autoconf-based libraries into the zmap tree so that
      they are statically linked into zmap when it is built.</p></li>
</ul>





<a name="adding_autoconf_packages"></a>
<h2>How To Add Other Autoconf Packages Into The Zmap Build System</h2>

<h3>1) Copying The Package Into The ZMap Tree</h3>

<p>In common with most programs ZMap makes use of other code libraries.
Sometimes these are libraries are always installed on systems and it makes
sense to use dynamic linking to access them. Sometimes however if the libraries
are small and not commonly available it makes more sense to import the library
code into the zmap build tree compiling it locally and linking it in statically
to avoid causing portability problems for users installing and compiling
zmap. This section describes how to do this for a library which has it's own
autoconf-based build system using the AceConn package as an example.</p>


<p>Get a copy of the new package and check that it builds on your system.</p>

<p>Get a fresh copy of the new package (i.e. a copy <b>without</b> any of the
files generated by the build process) and copy it into <b>src</b>:</p>

<pre>
  -rwxr-xr-x 1 edgrif zmap     0 Mar 18 11:03 AUTHORS
  <font color="red"><b>drwxr-xr-x 7 edgrif zmap  4096 Mar 18 11:03 AceConn</b></font>
  -rwxr-xr-x 1 edgrif zmap 17992 Mar 18 11:03 COPYING
  -rwxr-xr-x 1 edgrif zmap     0 Mar 18 11:03 ChangeLog
  -rwxr-xr-x 1 edgrif zmap 46159 Mar 18 11:03 Doxyfile.in
</pre>


<p>Add a .gitignore file to the new directory to exclude from git any files
that are created when the package is built (below example is for AceConn):</p>

<pre>
# Ignore any files created from the package build.
AceConn-1.1.pc
Makefile
include
libtool
doc/Makefile
src/.deps
src/.libs
src/Makefile
src/*.lo
src/libAceConn.la
stamp-h1
test/.deps
test/Makefile
test/simple*
m4/*.m4
</pre>


<p><b>IMPORTANT:</b> now add this new directory and its contents to the zmap git repository
otherwise you will have to redo these steps each time you checkout zmap !!</p>

<p>Note that should the package files change because there is a new version you
will have to merge the changes into this local copy as you see fit and then
update the zmap git repository with the changes.</p>


<h3>2) Checking The New Package Will Integrate Successfully Into The Zmap Build</h3>

<p>The new package needs to work as part of the zmap build and the autoconf package
has a number of additions since about version 2.6 that make this work. In particular
the package must use autoconf variables like <b>$(top_buildir)</b> and not relative or
absolute references to its own build directories:</p>

<pre>
Replace lines like this:

simpleclient_CPPFLAGS = -I<font color="red"><b>..</b></font>/include  @GLIB_CFLAGS@
simpleclient_LDADD =  <font color="red"><b>..</b></font>/src/.libs/libAceConn.la  -lreadline @GLIB_LIBS@

with:

simpleclient_CPPFLAGS = -I<font color="red"><b>$(top_srcdir)</b></font>/include  @GLIB_CFLAGS@
simpleclient_LDADD =  <font color="red"><b>$(top_builddir)</b></font>/src/.libs/libAceConn.la  -lreadline @GLIB_LIBS@
</pre>

<p>Note that in the <b>ZMap</b> build system the source files are not copied or
moved and so the new package autoconf files must use the <b>$(top_srcdir)</b>
variable to find their source files whereas the ZMap build is done in a
specific build directory so the new package autoconf files must use the
<b>$(top_builddir)</b> variable to refer the AceConn build products.</p>




<h3>3) Updating The ZMap Build Files To Include The New Package</h3>


<h4>Makefile.common</h4>

<p>Add the directory containing the package's public header files to the
includes list:</p>

<pre>
AM_CPPFLAGS = -g -I$(top_srcdir)/include \
	-I$(top_builddir)  <font color="red"><b>-I$(top_srcdir)/AceConn/include</b></font> \
	@GTK_CFLAGS@ \
        @LIBCURL_CPPFLAGS@ \
        $(NULL)
</pre>


<h4>Makefile.am</h4>

<p>Add the new package directory to the list of directories containing code that
needs building:</p>

<pre>
SUBDIRS = <font color="red"><b>AceConn</b></font> libpfetch libcurlobject libzmapfoocanvas include $(ZMAP_SRC_DIRS) $(CANVAS_TESTING)
</pre>


<p>Add the path to the package <b>.a</b> library to the list of libraries
to be compiled in to zmap:</p>

<pre>
zmap_LDADD =                                                 \
	$(top_builddir)/.libs/libZMapApp.a                   \
	$(top_builddir)/.libs/libZMap.a                      \
	$(top_builddir)/.libs/libZMapAppServices.a           \
	$(top_builddir)/.libs/libZMapThr.a                   \
	$(top_builddir)/.libs/libZMapXML.a                   \
	$(top_builddir)/.libs/libZMapUtils.a                 \
	$(top_builddir)/.libs/libzmapfoocanvas.a             \
	$(top_builddir)/.libs/libPFetch.a                    \
	<font color="red"><b>$(top_builddir)/AceConn/src/.libs/libAceConn.a       \</b></font>
        $(X_PRE_LIBS) $(X_LIBS) $(X_EXTRA_LIBS)              \
	$(GTK_LIBS)			                     \
	$(LIBCURL) -lexpat                                   \
	@MACOSX_UNIVERSAL_FLAGS@ $(NULL)
</pre>

<p><b>NOTE that the library must be the archive version, not the dynamic
library version, so that the new package code will be statically linked in to
zmap and hence will not need to be installed separately.</b>


<h4>configure.ac</h4>


<p>Add the new package directory to the list of extra autoconf packages
that need to be configured and run in order to build zmap:</p>

<pre>
AC_CONFIG_SUBDIRS([<font color="red"><b>AceConn</b></font>])

</pre>

<p>If you need to specify parameters to the ./configure call for just this package then this
hack just before the AC_CONFIG_SUBDIRS() macro (see 
<a href="https://github.com/tracebox/tracebox/blob/master/configure.ac">tracebox</a>) will work:</p>

<pre>
ac_configure_args_pre="$ac_configure_args"
ac_configure_args_post="$ac_configure_args --enable-static"
ac_configure_args="$ac_configure_args_post"
AC_CONFIG_COMMANDS_PRE([ac_configure_args="$ac_configure_args_pre"])
AC_CONFIG_COMMANDS_POST([ac_configure_args="$ac_configure_args_post"])
AC_CONFIG_SUBDIRS([<font color="red"><b>AceConn</b></font>])
</pre>

<p>In this case we are adding '--enable-static' to the list of arguments to ./configure to ensure
that the static library is built.</p>


<h3>Trying Out The Build</h3>

<p>You should now see that the new package is configured and built
as required by the zmap build system.</p>

<p>If you find you have problems with a package and manage to fix them
please document what you did as part of this file.</p>





<!--#include virtual="/perl/footer"-->


