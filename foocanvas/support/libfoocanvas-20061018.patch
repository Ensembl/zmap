Index: foo-canvas-line.c
===================================================================
RCS file: /cvs/gnome/foocanvas/libfoocanvas/foo-canvas-line.c,v
retrieving revision 1.7
diff -u -w -r1.7 foo-canvas-line.c
--- foo-canvas-line.c	4 Apr 2005 15:13:29 -0000	1.7
+++ foo-canvas-line.c	19 Oct 2006 08:48:55 -0000
@@ -1,3 +1,4 @@
+/*  Last edited: Oct 18 18:34 2006 (rds) */
 /*
  * Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation
  * All rights reserved.
@@ -338,7 +339,7 @@
 	/* Add possible over-estimate for wide lines */
 
 	if (line->width_pixels)
-		width = line->width / line->item.canvas->pixels_per_unit;
+		width = line->width / line->item.canvas->pixels_per_unit_x;
 	else
 		width = line->width;
 
@@ -466,7 +467,7 @@
 		return;
 
 	if (line->width_pixels)
-		width = line->width / line->item.canvas->pixels_per_unit;
+		width = line->width / line->item.canvas->pixels_per_unit_x;
 	else
 		width = line->width;
 
@@ -477,9 +478,9 @@
 	shape_c = line->shape_c + width / 2.0;
 
 	if (line->width_pixels) {
-		shape_a /= line->item.canvas->pixels_per_unit;
-		shape_b /= line->item.canvas->pixels_per_unit;
-		shape_c /= line->item.canvas->pixels_per_unit;
+		shape_a /= line->item.canvas->pixels_per_unit_x;
+		shape_b /= line->item.canvas->pixels_per_unit_x;
+		shape_c /= line->item.canvas->pixels_per_unit_x;
 	}
 
 	shape_a += 0.001;
@@ -600,7 +601,7 @@
 	if (line->width_pixels)
 		width = (int) line->width;
 	else
-		width = (int) (line->width * line->item.canvas->pixels_per_unit + 0.5);
+		width = (int) (line->width * line->item.canvas->pixels_per_unit_x + 0.5);
 
 	gdk_gc_set_line_attributes (line->gc,
 				    width,
@@ -1126,12 +1127,12 @@
 	 */
 
 	if (line->width_pixels)
-		width = line->width / item->canvas->pixels_per_unit;
+		width = line->width / item->canvas->pixels_per_unit_x;
 	else
 		width = line->width;
 
-	if (width < (1.0 / item->canvas->pixels_per_unit))
-		width = 1.0 / item->canvas->pixels_per_unit;
+	if (width < (1.0 / item->canvas->pixels_per_unit_x))
+		width = 1.0 / item->canvas->pixels_per_unit_x;
 
 	changed_miter_to_bevel = 0;
 
Index: foo-canvas-pixbuf.c
===================================================================
RCS file: /cvs/gnome/foocanvas/libfoocanvas/foo-canvas-pixbuf.c,v
retrieving revision 1.9
diff -u -w -r1.9 foo-canvas-pixbuf.c
--- foo-canvas-pixbuf.c	4 Apr 2005 15:13:29 -0000	1.9
+++ foo-canvas-pixbuf.c	19 Oct 2006 08:48:55 -0000
@@ -1,3 +1,4 @@
+/*  Last edited: May 11 11:33 2004 (rnc) */
 /* GNOME libraries - GdkPixbuf item for the GNOME canvas
  *
  * Copyright (C) 1999 The Free Software Foundation
@@ -564,13 +565,13 @@
 	}
 
 	if (priv->x_in_pixels) {
-		x = i2w_dx + priv->x / item->canvas->pixels_per_unit;
+		x = i2w_dx + priv->x / item->canvas->pixels_per_unit_x;
 	} else {
 		x = i2w_dx + priv->x;
 	}
 
 	if (priv->y_in_pixels) {
-		y = i2w_dy + priv->y / item->canvas->pixels_per_unit;
+		y = i2w_dy + priv->y / item->canvas->pixels_per_unit_y;
 	} else {
 		y = i2w_dy + priv->y;
 	}
@@ -582,7 +583,7 @@
 	}
 
 	if (priv->width_in_pixels)
-		width /= item->canvas->pixels_per_unit;
+		width /= item->canvas->pixels_per_unit_x;
 
 	if (priv->height_set) {
 		height = priv->height;
@@ -591,7 +592,7 @@
 	}
 
 	if (priv->height_in_pixels)
-		height /= item->canvas->pixels_per_unit;
+		height /= item->canvas->pixels_per_unit_y;
 
 
 	switch (priv->anchor) {
@@ -781,8 +782,8 @@
 	pixbuf = priv->pixbuf;
 
 	*actual_item = item;
-
-	no_hit = item->canvas->pixels_per_unit * 2 + 10;
+	/* guessing that the x factor is OK here. RNGC */
+	no_hit = item->canvas->pixels_per_unit_x * 2 + 10;
 
 	if (!priv->pixbuf)
 		return no_hit;
@@ -823,13 +824,13 @@
 	priv = gcp->priv;
 
 	if (priv->x_in_pixels) {
-		priv->x += dx * item->canvas->pixels_per_unit;
+		priv->x += dx * item->canvas->pixels_per_unit_x;
 	} else {
 		priv->x += dx;
 	}
 
 	if (priv->y_in_pixels) {
-		priv->y += dy * item->canvas->pixels_per_unit;
+		priv->y += dy * item->canvas->pixels_per_unit_y;
 	} else {
 		priv->y += dy;
 	}
Index: foo-canvas-polygon.c
===================================================================
RCS file: /cvs/gnome/foocanvas/libfoocanvas/foo-canvas-polygon.c,v
retrieving revision 1.7
diff -u -w -r1.7 foo-canvas-polygon.c
--- foo-canvas-polygon.c	4 Apr 2005 15:13:29 -0000	1.7
+++ foo-canvas-polygon.c	19 Oct 2006 08:48:55 -0000
@@ -1,3 +1,4 @@
+/*  Last edited: Oct 19 09:39 2006 (rds) */
 /*
  * Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation
  * All rights reserved.
@@ -276,7 +277,7 @@
 	/* Add outline width */
 
 	if (poly->width_pixels)
-		width = poly->width / poly->item.canvas->pixels_per_unit;
+		width = poly->width / poly->item.canvas->pixels_per_unit_x;
 	else
 		width = poly->width;
 
@@ -400,7 +401,7 @@
 	if (poly->width_pixels)
 		width = (int) poly->width;
 	else
-		width = (int) (poly->width * poly->item.canvas->pixels_per_unit + 0.5);
+		width = (int) (poly->width * poly->item.canvas->pixels_per_unit_x + 0.5);
 
 	gdk_gc_set_line_attributes (poly->outline_gc, width,
 				    GDK_LINE_SOLID, GDK_CAP_ROUND, GDK_JOIN_ROUND);
@@ -595,15 +596,16 @@
 static void
 get_color_value (FooCanvasPolygon *poly, gulong pixel, GValue *value)
 {
-	GdkColor *color;
+	GdkColor color;
 	GdkColormap *colormap;
 
-	color = g_new (GdkColor, 1);
-	color->pixel = pixel;
+	//color = g_new (GdkColor, 1);
+	//color->pixel = pixel;
 
-	colormap = gtk_widget_get_colormap (GTK_WIDGET (poly));
-	gdk_rgb_find_color (colormap, color);
-	g_value_set_boxed (value, color);
+	colormap = gtk_widget_get_colormap (GTK_WIDGET (FOO_CANVAS_ITEM(poly)->canvas));
+	gdk_colormap_query_color(colormap, pixel, &color);
+	//gdk_rgb_find_color (colormap, color);
+	g_value_set_boxed (value, &color);
 }
 
 static void
@@ -801,7 +803,7 @@
 
 	if (poly->outline_set) {
 		if (poly->width_pixels)
-			width = poly->width / item->canvas->pixels_per_unit;
+			width = poly->width / item->canvas->pixels_per_unit_x;
 		else
 			width = poly->width;
 
Index: foo-canvas-rect-ellipse.c
===================================================================
RCS file: /cvs/gnome/foocanvas/libfoocanvas/foo-canvas-rect-ellipse.c,v
retrieving revision 1.12
diff -u -w -r1.12 foo-canvas-rect-ellipse.c
--- foo-canvas-rect-ellipse.c	4 Apr 2005 15:13:29 -0000	1.12
+++ foo-canvas-rect-ellipse.c	19 Oct 2006 08:48:55 -0000
@@ -1,3 +1,4 @@
+/*  Last edited: Feb 25 11:09 2005 (rds) */
 /*
  * Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation
  * All rights reserved.
@@ -281,7 +282,7 @@
 	item = FOO_CANVAS_ITEM (re);
 
 	if (re->width_pixels)
-		hwidth = (re->width / item->canvas->pixels_per_unit) / 2.0;
+		hwidth = (re->width / item->canvas->pixels_per_unit_x) / 2.0;
 	else
 		hwidth = re->width / 2.0;
 
@@ -352,7 +353,7 @@
 	if (re->width_pixels)
 		width = (int) re->width;
 	else
-		width = (int) (re->width * re->item.canvas->pixels_per_unit + 0.5);
+		width = (int) (re->width * re->item.canvas->pixels_per_unit_x + 0.5);
 
 	gdk_gc_set_line_attributes (re->outline_gc, width,
 				    GDK_LINE_SOLID, GDK_CAP_PROJECTING, GDK_JOIN_MITER);
@@ -734,7 +735,7 @@
 	re = FOO_CANVAS_RE (item);
 
 	if (re->width_pixels)
-		hwidth = (re->width / item->canvas->pixels_per_unit) / 2.0;
+		hwidth = (re->width / item->canvas->pixels_per_unit_x) / 2.0;
 	else
 		hwidth = re->width / 2.0;
 
@@ -1065,7 +1066,7 @@
 
 	if (re->outline_set) {
 		if (re->width_pixels)
-			hwidth = (re->width / item->canvas->pixels_per_unit) / 2.0;
+			hwidth = (re->width / item->canvas->pixels_per_unit_x) / 2.0;
 		else
 			hwidth = re->width / 2.0;
 
@@ -1191,7 +1192,7 @@
 		if (re->width_pixels)
 			width_pixels = (int) re->width;
 		else
-			width_pixels = (int) floor (re->width * re->item.canvas->pixels_per_unit + 0.5);
+			width_pixels = (int) floor (re->width * re->item.canvas->pixels_per_unit_x + 0.5);
 
 		width_lt = width_pixels / 2;
 		width_rb = (width_pixels + 1) / 2;
@@ -1344,7 +1345,7 @@
 
 	if (re->outline_set) {
 		if (re->width_pixels)
-			width = re->width / item->canvas->pixels_per_unit;
+			width = re->width / item->canvas->pixels_per_unit_x;
 		else
 			width = re->width;
 	} else
Index: foo-canvas-text.c
===================================================================
RCS file: /cvs/gnome/foocanvas/libfoocanvas/foo-canvas-text.c,v
retrieving revision 1.8
diff -u -w -r1.8 foo-canvas-text.c
--- foo-canvas-text.c	4 Apr 2005 15:13:29 -0000	1.8
+++ foo-canvas-text.c	19 Oct 2006 08:48:55 -0000
@@ -1,3 +1,4 @@
+/*  Last edited: Oct 18 18:38 2006 (rds) */
 /* -*- Mode: C; tab-width: 8; indent-tabs-mode: t; c-basic-offset: 8 -*- */
 /*
  * $Id: foo-canvas-text.c,v 1.8 2005/04/04 15:13:29 mortenw Exp $
@@ -615,8 +616,8 @@
 	/* Get canvas pixel coordinates for clip rectangle position */
 
 	foo_canvas_w2c (item->canvas, wx, wy, &text->clip_cx, &text->clip_cy);
-	text->clip_cwidth = text->clip_width * item->canvas->pixels_per_unit;
-	text->clip_cheight = text->clip_height * item->canvas->pixels_per_unit;
+	text->clip_cwidth = text->clip_width * item->canvas->pixels_per_unit_x;
+	text->clip_cheight = text->clip_height * item->canvas->pixels_per_unit_y;
 
 	/* Anchor text */
 
@@ -976,7 +977,7 @@
 	case PROP_WRAP_WIDTH: {
 		double w = fabs (g_value_get_double (value));
 		pango_layout_set_width (text->layout,
-			w * text->item.canvas->pixels_per_unit * PANGO_SCALE);
+			w * text->item.canvas->pixels_per_unit_x * PANGO_SCALE);
 
 		break;
 	}
@@ -1252,11 +1253,11 @@
 		break;
 
 	case PROP_TEXT_WIDTH:
-		g_value_set_double (value, text->max_width / text->item.canvas->pixels_per_unit);
+		g_value_set_double (value, text->max_width / text->item.canvas->pixels_per_unit_x);
 		break;
 
 	case PROP_TEXT_HEIGHT:
-		g_value_set_double (value, text->height / text->item.canvas->pixels_per_unit);
+		g_value_set_double (value, text->height / text->item.canvas->pixels_per_unit_y);
 		break;
 
 	default:
@@ -1309,7 +1310,8 @@
 	if (text->rise_set)
 		add_attr (attr_list, pango_attr_rise_new (text->rise));
 
-	zoom = text->item.canvas->pixels_per_unit;
+	/* guessing that the x factor is OK here. RNGC */
+	zoom = text->item.canvas->pixels_per_unit_x;
 	if (fabs (zoom - 1.) > 1e-4) {
 		PangoAttribute *attr = pango_attr_scale_new (zoom);
 		attr->start_index = 0;
@@ -1479,14 +1481,14 @@
  	        PangoRectangle log_rect;
 
 		pango_layout_iter_get_line_extents (iter, NULL, &log_rect);
-
-		if (text->clip) {
+                /* if (text->clip) { // original */
+		/* if (!text->clip) { // broken for clipped !!! ;) */
+                if(1) {
 			x1 = PANGO_PIXELS (log_rect.x);
 			y1 = PANGO_PIXELS (log_rect.y);
 			x2 = PANGO_PIXELS (log_rect.x+log_rect.width);
 			y2 = PANGO_PIXELS (log_rect.y+log_rect.height);
 
-
 			if (x1 < text->clip_cx)
 				x1 = text->clip_cx;
 
@@ -1529,7 +1531,9 @@
 			return 0.0;
 		}
 
+
 		dist = sqrt (dx * dx + dy * dy);
+
 		if (dist < best)
 			best = dist;
 
@@ -1537,7 +1541,10 @@
 
 	pango_layout_iter_free(iter);
 
-	return best / item->canvas->pixels_per_unit;
+
+	/* guessing that the x factor is OK here. RNGC */
+        /* using x factor here as that is what is used in foo-canvas.c ... */
+	return best / item->canvas->pixels_per_unit_x;
 }
 
 static void
@@ -1567,8 +1574,8 @@
 		width = text->clip_width;
 		height = text->clip_height;
 	} else {
-		width = text->max_width / item->canvas->pixels_per_unit;
-		height = text->height / item->canvas->pixels_per_unit;
+		width = text->max_width / item->canvas->pixels_per_unit_x;
+		height = text->height / item->canvas->pixels_per_unit_y;
 	}
 
 	switch (text->anchor) {
Index: foo-canvas-widget.c
===================================================================
RCS file: /cvs/gnome/foocanvas/libfoocanvas/foo-canvas-widget.c,v
retrieving revision 1.5
diff -u -w -r1.5 foo-canvas-widget.c
--- foo-canvas-widget.c	13 May 2005 03:34:36 -0000	1.5
+++ foo-canvas-widget.c	19 Oct 2006 08:48:55 -0000
@@ -1,3 +1,4 @@
+/*  Last edited: May 11 11:42 2004 (rnc) */
 /*
  * Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation
  * All rights reserved.
@@ -456,8 +457,8 @@
 			witem->cwidth = (int) (witem->width + 0.5);
 			witem->cheight = (int) (witem->height + 0.5);
 		} else {
-			witem->cwidth = (int) (witem->width * item->canvas->pixels_per_unit + 0.5);
-			witem->cheight = (int) (witem->height * item->canvas->pixels_per_unit + 0.5);
+			witem->cwidth = (int) (witem->width * item->canvas->pixels_per_unit_x + 0.5);
+			witem->cheight = (int) (witem->height * item->canvas->pixels_per_unit_y + 0.5);
 		}
 
 		gtk_widget_set_usize (witem->widget, witem->cwidth, witem->cheight);
@@ -516,8 +517,8 @@
 
 	foo_canvas_c2w (item->canvas, witem->cx, witem->cy, &x1, &y1);
 
-	x2 = x1 + (witem->cwidth - 1) / item->canvas->pixels_per_unit;
-	y2 = y1 + (witem->cheight - 1) / item->canvas->pixels_per_unit;
+	x2 = x1 + (witem->cwidth - 1) / item->canvas->pixels_per_unit_x;
+	y2 = y1 + (witem->cheight - 1) / item->canvas->pixels_per_unit_y;
 
 	/* Is point inside widget bounds? */
 
Index: foo-canvas.c
===================================================================
RCS file: /cvs/gnome/foocanvas/libfoocanvas/foo-canvas.c,v
retrieving revision 1.26
diff -u -w -r1.26 foo-canvas.c
--- foo-canvas.c	14 Mar 2006 00:13:44 -0000	1.26
+++ foo-canvas.c	19 Oct 2006 08:48:55 -0000
@@ -1,3 +1,4 @@
+/*  Last edited: Oct 18 18:59 2006 (rds) */
 /* -*- Mode: C; tab-width: 8; indent-tabs-mode: 8; c-basic-offset: 8 -*- */
 /*
  * Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation
@@ -295,6 +296,7 @@
 	}
 }
 
+
 /* Destroy handler for canvas items */
 static void
 foo_canvas_item_destroy (GtkObject *object)
@@ -339,10 +341,8 @@
 
 		if (item->parent)
 			group_remove (FOO_CANVAS_GROUP (item->parent), item);
-
 		item->canvas = NULL;
 	}
-
 	GTK_OBJECT_CLASS (item_parent_class)->destroy (object);
 }
 
@@ -1370,7 +1370,7 @@
 	group = FOO_CANVAS_GROUP (item);
 
 	(* group_parent_class->update) (item, i2w_dx, i2w_dy, flags);
-
+        /* if(item->object.flags & FOO_CANVAS_ITEM_VISIBLE){ */
 	bbox_x0 = 0;
 	bbox_y0 = 0;
 	bbox_x1 = 0;
@@ -1398,6 +1398,8 @@
 	item->y1 = bbox_y0;
 	item->x2 = bbox_x1;
 	item->y2 = bbox_y1;
+        /* } */
+        return ;
 }
 
 /* Unrealize handler for canvas groups */
@@ -1540,10 +1542,10 @@
 			has_point = TRUE;
 		} else
 			has_point = FALSE;
-
+		/* guessing that the x factor is OK here. RNGC */
 		if (has_point
 		    && point_item
-		    && ((int) (dist * item->canvas->pixels_per_unit + 0.5)
+		    && ((int) (dist * item->canvas->pixels_per_unit_x + 0.5)
 			<= item->canvas->close_enough)) {
 			best = dist;
 			*actual_item = point_item;
@@ -2080,7 +2082,8 @@
 	canvas->scroll_x2 = canvas->layout.width;
 	canvas->scroll_y2 = canvas->layout.height;
 
-	canvas->pixels_per_unit = 1.0;
+	canvas->pixels_per_unit_x = 1.0;
+	canvas->pixels_per_unit_y = 1.0;
 
 	canvas->pick_event.type = GDK_LEAVE_NOTIFY;
 	canvas->pick_event.crossing.x = 0;
@@ -2302,8 +2305,8 @@
 	canvas_width = GTK_WIDGET (canvas)->allocation.width;
 	canvas_height = GTK_WIDGET (canvas)->allocation.height;
 
-	scroll_width = floor ((canvas->scroll_x2 - canvas->scroll_x1) * canvas->pixels_per_unit + 0.5);
-	scroll_height = floor ((canvas->scroll_y2 - canvas->scroll_y1) * canvas->pixels_per_unit + 0.5);
+	scroll_width = floor ((canvas->scroll_x2 - canvas->scroll_x1) * canvas->pixels_per_unit_x + 0.5);
+	scroll_height = floor ((canvas->scroll_y2 - canvas->scroll_y1) * canvas->pixels_per_unit_y + 0.5);
 
 	right_limit = scroll_width - canvas_width;
 	bottom_limit = scroll_height - canvas_height;
@@ -3101,15 +3104,35 @@
 
 /**
  * foo_canvas_set_pixels_per_unit:
- * @canvas: A canvas.
+ * @canvas: A canvas
  * @n: The number of pixels that correspond to one canvas unit.
  *
  * Sets the zooming factor of a canvas by specifying the number of pixels that
  * correspond to one canvas unit.
+ * This is retained for backwards compatibility and just calls
+ * foo_canvas_set_pixels_per_unit_xy, passing the number of pixels/unit twice.
  **/
 void
 foo_canvas_set_pixels_per_unit (FooCanvas *canvas, double n)
 {
+  foo_canvas_set_pixels_per_unit_xy(canvas, n, n);
+  return;
+}
+
+
+/**
+ * foo_canvas_set_pixels_per_unit_xy:
+ * @canvas: A canvas.
+ * @x: The number of pixels that correspond to one canvas unit on the x axis.
+ * @y: The number of pixels that correspond to one canvas unit on the y axis.
+ *
+ * Sets the zooming factor of a canvas by specifying the number of pixels that
+ * correspond to one canvas unit.
+ * Having two zooming factors enables asymmetric zooming.
+ **/
+void
+foo_canvas_set_pixels_per_unit_xy (FooCanvas *canvas, double x, double y)
+{
 	GtkWidget *widget;
 	double cx, cy;
 	int x1, y1;
@@ -3119,7 +3142,8 @@
 	gint attributes_mask;
 
 	g_return_if_fail (FOO_IS_CANVAS (canvas));
-	g_return_if_fail (n > FOO_CANVAS_EPSILON);
+	/* guessing that the x factor is OK here.  RNCG */
+	g_return_if_fail (x > FOO_CANVAS_EPSILON);
 
 	widget = GTK_WIDGET (canvas);
 
@@ -3127,14 +3151,15 @@
 	center_y = widget->allocation.height / 2;
 
 	/* Find the coordinates of the screen center in units. */
-	cx = (canvas->layout.hadjustment->value + center_x) / canvas->pixels_per_unit + canvas->scroll_x1 + canvas->zoom_xofs;
-	cy = (canvas->layout.vadjustment->value + center_y) / canvas->pixels_per_unit + canvas->scroll_y1 + canvas->zoom_yofs;
+	cx = (canvas->layout.hadjustment->value + center_x) / canvas->pixels_per_unit_x + canvas->scroll_x1 + canvas->zoom_xofs;
+	cy = (canvas->layout.vadjustment->value + center_y) / canvas->pixels_per_unit_y + canvas->scroll_y1 + canvas->zoom_yofs;
 
 	/* Now calculate the new offset of the upper left corner. (round not truncate) */
-	x1 = ((cx - canvas->scroll_x1) * n) - center_x + .5;
-	y1 = ((cy - canvas->scroll_y1) * n) - center_y + .5;
+	x1 = ((cx - canvas->scroll_x1) * x) - center_x + .5;
+	y1 = ((cy - canvas->scroll_y1) * y) - center_y + .5;
 
-	canvas->pixels_per_unit = n;
+	canvas->pixels_per_unit_x = x;
+	canvas->pixels_per_unit_y = y;
 
 	if (!(canvas->root->object.flags & FOO_CANVAS_ITEM_NEED_DEEP_UPDATE)) {
 		canvas->root->object.flags |= FOO_CANVAS_ITEM_NEED_DEEP_UPDATE;
@@ -3268,7 +3293,8 @@
 	foo_canvas_w2c (canvas, x, y, &cx, &cy);
 
 	dist = foo_canvas_item_invoke_point (canvas->root, x, y, cx, cy, &item);
-	if ((int) (dist * canvas->pixels_per_unit + 0.5) <= canvas->close_enough)
+	/* guessing the x factor is OK here.  RNGC */
+	if ((int) (dist * canvas->pixels_per_unit_x + 0.5) <= canvas->close_enough)
 		return item;
 	else
 		return NULL;
@@ -3331,16 +3357,17 @@
 void
 foo_canvas_w2c (FooCanvas *canvas, double wx, double wy, int *cx, int *cy)
 {
-	double zoom;
+	double zoom_x, zoom_y;
 
 	g_return_if_fail (FOO_IS_CANVAS (canvas));
 	
-	zoom = canvas->pixels_per_unit;
+	zoom_x = canvas->pixels_per_unit_x;
+	zoom_y = canvas->pixels_per_unit_y;
 	
 	if (cx)
-		*cx = floor ((wx - canvas->scroll_x1)*zoom + canvas->zoom_xofs + 0.5);
+		*cx = floor ((wx - canvas->scroll_x1)*zoom_x + canvas->zoom_xofs + 0.5);
 	if (cy)
-		*cy = floor ((wy - canvas->scroll_y1)*zoom + canvas->zoom_yofs + 0.5);
+		*cy = floor ((wy - canvas->scroll_y1)*zoom_y + canvas->zoom_yofs + 0.5);
 }
 
 /**
@@ -3380,16 +3407,17 @@
 void
 foo_canvas_w2c_d (FooCanvas *canvas, double wx, double wy, double *cx, double *cy)
 {
-	double zoom;
+	double zoom_x, zoom_y;
 
 	g_return_if_fail (FOO_IS_CANVAS (canvas));
 
-	zoom = canvas->pixels_per_unit;
+	zoom_x = canvas->pixels_per_unit_x;
+	zoom_y = canvas->pixels_per_unit_y;
 	
 	if (cx)
-		*cx = (wx - canvas->scroll_x1)*zoom + canvas->zoom_xofs;
+		*cx = (wx - canvas->scroll_x1)*zoom_x + canvas->zoom_xofs;
 	if (cy)
-		*cy = (wy - canvas->scroll_y1)*zoom + canvas->zoom_yofs;
+		*cy = (wy - canvas->scroll_y1)*zoom_y + canvas->zoom_yofs;
 }
 
 
@@ -3406,16 +3434,17 @@
 void
 foo_canvas_c2w (FooCanvas *canvas, int cx, int cy, double *wx, double *wy)
 {
-	double zoom;
+	double zoom_x, zoom_y;
 
 	g_return_if_fail (FOO_IS_CANVAS (canvas));
 
-	zoom = canvas->pixels_per_unit;
+	zoom_x = canvas->pixels_per_unit_x;
+	zoom_y = canvas->pixels_per_unit_y;
 	
 	if (wx)
-		*wx = (cx - canvas->zoom_xofs)/zoom + canvas->scroll_x1;
+		*wx = (cx - canvas->zoom_xofs)/zoom_x + canvas->scroll_x1;
 	if (wy)
-		*wy = (cy - canvas->zoom_yofs)/zoom + canvas->scroll_y1;
+		*wy = (cy - canvas->zoom_yofs)/zoom_y + canvas->scroll_y1;
 }
 
 
@@ -3441,11 +3470,11 @@
 
 	if (worldx)
 		*worldx = canvas->scroll_x1 + ((winx - canvas->zoom_xofs)
-					       / canvas->pixels_per_unit);
+					       / canvas->pixels_per_unit_x);
 
 	if (worldy)
 		*worldy = canvas->scroll_y1 + ((winy - canvas->zoom_yofs)
-					       / canvas->pixels_per_unit);
+					       / canvas->pixels_per_unit_y);
 }
 
 
@@ -3468,10 +3497,10 @@
 	g_return_if_fail (FOO_IS_CANVAS (canvas));
 
 	if (winx)
-		*winx = (canvas->pixels_per_unit)*(worldx - canvas->scroll_x1) + canvas->zoom_xofs;
+		*winx = (canvas->pixels_per_unit_x)*(worldx - canvas->scroll_x1) + canvas->zoom_xofs;
 
 	if (winy)
-		*winy = (canvas->pixels_per_unit)*(worldy - canvas->scroll_y1) + canvas->zoom_yofs;
+		*winy = (canvas->pixels_per_unit_y)*(worldy - canvas->scroll_y1) + canvas->zoom_yofs;
 }
 
 
@@ -3999,3 +4028,11 @@
                                        FOO_TYPE_CANVAS_ITEM,
                                        foo_canvas_item_accessible_factory_get_type ());
 }
+
+void 
+foo_canvas_zmap(void)
+{
+  /* do nothing */
+}
+
+/*  Last edited: Feb 14 15:21 2005 (rds) */
Index: foo-canvas.h
===================================================================
RCS file: /cvs/gnome/foocanvas/libfoocanvas/foo-canvas.h,v
retrieving revision 1.4
diff -u -w -r1.4 foo-canvas.h
--- foo-canvas.h	2 Mar 2004 14:32:55 -0000	1.4
+++ foo-canvas.h	19 Oct 2006 08:48:55 -0000
@@ -1,3 +1,4 @@
+/*  Last edited: Jun 15 08:20 2005 (edgrif) */
 /* -*- Mode: C; tab-width: 8; indent-tabs-mode: 8; c-basic-offset: 8 -*- */
 /*
  * Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation
@@ -371,7 +372,8 @@
 	double scroll_x2, scroll_y2;
 
 	/* Scaling factor to be used for display */
-	double pixels_per_unit;
+	double pixels_per_unit_x;
+	double pixels_per_unit_y;
 
 	/* Idle handler ID */
 	guint idle_id;
@@ -456,6 +458,10 @@
 /* Sets the number of pixels that correspond to one unit in world coordinates */
 void foo_canvas_set_pixels_per_unit (FooCanvas *canvas, double n);
 
+/* Sets the number of  pixels corresponding to one unit in world coordinates
+ * separately on x and y axes, allowing asymmetric zooming. */
+void foo_canvas_set_pixels_per_unit_xy (FooCanvas *canvas, double x, double y);
+
 /* Wether the canvas centers the scroll region if it is smaller than the window  */
 void foo_canvas_set_center_scroll_region (FooCanvas *canvas, gboolean center_scroll_region);
 
@@ -525,6 +531,10 @@
  */
 void foo_canvas_set_stipple_origin (FooCanvas *canvas, GdkGC *gc);
 
+void foo_canvas_zmap(void);
+
 G_END_DECLS
 
+
 #endif
+
Index: libfoocanvas.h
===================================================================
RCS file: /cvs/gnome/foocanvas/libfoocanvas/libfoocanvas.h,v
retrieving revision 1.1.1.1
diff -u -w -r1.1.1.1 libfoocanvas.h
--- libfoocanvas.h	11 Feb 2002 04:23:32 -0000	1.1.1.1
+++ libfoocanvas.h	19 Oct 2006 08:48:55 -0000
@@ -1,3 +1,4 @@
+/*  Last edited: Aug  1 11:42 2006 (edgrif) */
 /*
  * Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation
  * All rights reserved.
@@ -34,6 +35,9 @@
 #include <libfoocanvas/foo-canvas-widget.h>
 #include <libfoocanvas/foo-canvas-rect-ellipse.h>
 #include <libfoocanvas/foo-canvas-util.h>
+
+#include <libfoocanvas/foozmap-canvas-line-glyph.h>
+
 
 G_BEGIN_DECLS
 
