#!/bin/bash
#
# Take a patched foocanvas originally created with the script make_working_foocanvas
# and create a tar file of the latest foocanvas and a patch file of our changes
# to the foocanvas. These can be used by make_working_foocanvas to create an up to date
# foocanvas with all our changes.
#
# Note, the patch file and tar files are NOT enough on their own to create a working
# foocanvas so be sure to use make_working_foocanvas !
#

scriptname=`basename $0`
patch_dir='FOOCANVAS-WORKING-COPY'

# set up usage strings.
cmdstring='[-c<reason> -r ]'
descstring='
   -c   commit patch and tar files, -c flag must be followed immediately by quoted reason string
        which will be passed to cvs commit

   -r   remove the complete $patch_dir directory'


usage ()
{
  if [ -n "$3" ]
  then
    echo
    echo "Warning: $3"
  fi

  echo
  echo "Usage:   $scriptname $1"
  echo
  echo "$2"
  echo

  exit 1
}


msgAndExit ()
{
  errmsg="$scriptname - Fatal Error: $1 !!"

  echo "$errmsg"

  exit 1
}


base_dir='ZMap/foocanvas'
working_dir='foocanvas.working'
latest_dir='foocanvas.latest'
support_dir='support'
current_dir=`pwd`

today=`date +%Y%m%d`
file_prefix="libfoocanvas-$today"
patch_file="$file_prefix.patch"
tar_file="$file_prefix.tar.gz" 
cvs=''
remove=''


while getopts ":c:r" opt ; do
  case $opt in
    c  ) cvs=$OPTARG ;;
    r  ) remove='TRUE'    ;;
    \? ) usage "$cmdstring" "$descstring" "Bad command line flag"
  esac
done



# Try and check we are in the right place...
if [ ! -d CVS ]  || [ ! -d $our_src_dir ] || [ ! -d $support_dir ] ; then
  msgAndExit "script must be run from the $base_dir directory"
fi


if [ ! -d $patch_dir ] ; then
  msgAndExit "agh, working directory $patch_dir does not exist"
fi


cd $patch_dir || msgAndExit "could not cd to $patch_dir"

cd $working_dir || msgAndExit "could not cd to $working_dir"

RC=0
diff -u -r ../$latest_dir ./ > ../$patch_file || RC=1
if [ $RC == 1 ] ; then
  echo "diff of $latest_dir and $working_dir failed, this may be because of unimportant"
  echo "problems, e.g. irrelevant missing files, examine ../$patch_file."
  echo "If $patch_file diff file is ok then press 'y' and <return> to continue, just <return> to abort."

  read reply
  if [ -z $reply ] || [ $reply != "y" ] ; then
    echo $reply
    msgAndExit "diff failed program aborted."
  fi
fi

cd .. || msgAndExit "could not cd back to $patch_dir"

mv $latest_dir $file_prefix || msgAndExit "rename of $latest_dir"

tar -zcf$tar_file $file_prefix || msgAndExit "tar of $file_prefix failed."

cp $patch_file $tar_file ../$support_dir || msgAndExit "cp $patch_file $tar_file failed"

# optionally put the tar and patch file in cvs.
if [ -n "$cvs" ] ; then

  cd ../$support_dir || msgAndExit "could not cd $support_dir"

  echo "putting $patch_file  and $tar_file into cvs...."

  cvs add -ko $patch_file
  cvs add -kb $tar_file
  cvs commit -m "reason..." $patch_file $tar_file

else

  echo
  echo "Files $patch_file and $tar_file have been added to the support directory."
  echo "You now to need to cvs add and cvs commit them when you are ready."
  echo

fi

# optionally remove the whole working directory.
if [ -n "$remove" ] ; then
  cd $current_dir || msgAndExit "could not cd to $current_dir"
  rm -rf $patch_dir || msgAndExit "remove of $current_dir failed"
fi



exit 0

