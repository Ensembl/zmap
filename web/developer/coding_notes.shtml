<!--#set var="banner" value="Coding Notes"-->
<!--#set var="stylesheet" value="css/zmap-default.css" -->
<!--#set var="author" value="edgrif@sanger.ac.uk" -->

<!--#include virtual="/perl/header"-->


<p>This is simply a collection of notes about coding stuff to maintain consistency.</p>

<P>A good way to maintain consistency is have the editor do the indenting/commenting
etc. If you use the right profile code then there are some emacs functions
to do this which include:</p>

<ul>
  <li><b>Alt-X indent-region</b> will indent the code for the marked region.
  <li><b>TAB</b> indents the current line (or moves the cursor to the correct
      indentation on a blank line.
</ul>


<h2>Indenting</h2>

<P>The standard for code has been to indent by two for each block, there seems
no reason to change it. Line length should be kept to somewhere between 80 and
90 chars, i.e. something that will fit comfortably on to a screen with a reasonable
font size. <b>BUT</b> exceeding this length occasionally is not a problem.</p>


<pre><code>int func(void)
{
  int some_var ;

  if (blah)
    {
      call_something() ;
    }

  return ;
}
</code></pre>



<h2>Commenting Style</h2>

<P>Block comments and line comments should be in this style:</P>


<pre><code>
  if (blah)
    {
      /* This is quite a long block
       * comment that runs to more than one
       * line. */
      call_something() ;				    /* unknown function */
    }
</code></pre>



<h2>Type, Function and variable naming</h2>

<P>General naming conventions:</p>


<ul>
  <li><b>Types:</b> ThisIsATypeName
  <li><b>Functions:</b> aFunctionName
  <li><b>Variables:</b> a_variable_name
</ul>



<h3>Function names</h3>

<P>Its useful to adopt different naming styles for external interface functions, internal interface
functions and static functions:</p>


<ul>
  <li><b>External interface functions</b> have external linkage, are declared in <b>public</b>
      headers and should be named:
      <ul>
	<li><b>zMapXXXXX</b>
      </ul>
  <li><b>Internal interface functions</b> have external linkage, are declared in <b>private</b>
      headers and should be named:
      <ul>
	<li><b>zmapXXXXX</b>
      </ul>
  <li><b>static functions</b> have internal linkage only, are declared within the file
      where they are defined and should be named:
      <ul>
	<li><b>anythingYouLike</b>
      </ul>
</ul>


<h3>Assert vs. Logging</h3>

<p>There is inconsistent use of assert's and logging in ZMap in particular to check
function parameters. For all new
code and in old code as and when we can we should follow these guidelines:</p>


<ul>
  <li><b>External Interface functions:</b> should <b>never</b> use <b>zMapAssert()</b> but
      instead should use <b>zMapLogReturnIfFail()</b> & <b>zMapLogReturnValIfFail()</b> to log errors
      and return indicating failure. The caller must then handle that.
  <li><b>External Package functions:</b> should always use <b>zMapAssert()</b>, an error
      here shows that something has gone wrong in the package and it's time to stop.
  <li><b>Internal (static) Package functions:</b> should always use <b>zMapAssert()</b>, an error
      here shows that something has gone wrong in the package and it's time to stop.
</ul>

<p>The aim here is to avoid ZMap crashing because invalid parameters have been passed from
one package to another but to log such errors so they can be corrected. Errors in functions
internal to a package mean there is a problem in the code and aborting the process is more
acceptable than continuing.</p>



<!--#include virtual="/perl/footer"-->

