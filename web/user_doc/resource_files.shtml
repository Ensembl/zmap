<!--#set var="banner" value="Resource Files for ZMap"-->
<!--#include virtual="/perl/header"-->

<!--#set var="author" value="edgrif@sanger.ac.uk" -->

<style>
pre{ width: 95%; background-color: #DDDDDD; border-style: solid; border-width: 1px; padding: 10px }
.example{ border-color: #000000 }
li.stanza { width: 95% }
li.stanza span.opt { float: left; width: 100px; text-align: right; }
li.stanza span.desc { float: right; width: 235px; text-align: left;  } 
</style>


<fieldset>
<legend>Overview</legend>
<p>ZMap  reads  resource  files  to  control various  aspects  of  its
configuration.  Currently  this only  occurs at start  up, but  in the
future will  be dynamic  and hopefully complete  with an  editor.  The
following is  a description of the  various files that  ZMap reads and
how configuration is specified in those files.</p>
</fieldset><br />

<fieldset>
<legend>File Format</legend>


<p>The format of the <a href="#sectionfiles">files</a> follows a stanza based layout.</p>

<pre class="example">
StanzaName
{
property = "value"
numeric = 1.0
number = 32000
truth = true
list = "one two three four"
}

NamedStanza
{
foreground_colour = "blue"
background_colour = "white"
}
</pre>

</fieldset><br />

<fieldset>
<legend id="sectionfiles">Directories and Files</legend>

<p>The    main   configuration    files   are    held   in    the   <a
href="#sectionfiles1">.ZMap</a> directory which must be a subdirectory of
the users home directory. Within  this directory are a series of files
that control how zmap works.</p>


<h5 id="sectionfiles1">~/.ZMap - The configuration directory</h5>

<p>This  is the  default directory,  in which,  ZMap searches  for the
configuration  files.  The  user may  change this  by passing  ZMap an
alternate directory on the command line when starting ZMap using the
--conf_dir option (<a href="#commandline">command line options</a>).</p>

<h5 id="sectionfiles2">Main configuration file</h5>

<p>ZMap   looks    in   <a   href="#sectionfiles1">the   configuration
directory</a>  for a  file named  ZMap.  Without this  file ZMap  will
exit.</p>

<p>Stanzas:
<div class="stanza">
  <span class="opt"><a href="#stanza_source">source</a></span>
  <span class="desc"> - controls where zmap looks for data sources</span>
</div>

<div class="stanza">
  <span class="opt"><a href="#stanza_zmapwindow">ZMapWindow</a></span>
  <span class="desc"> - controls some general zmap window styles</span>
</div>

<div class="stanza">
  <span class="opt"><a href="#stanza_align">align</a></span>
  <span class="desc"> - aligns sequence...</span>
</div>
</p>

<h5 id="sectionfiles3">Style configuration file</h5>

<p>This  file should  be located  in the  <a href="#sectionfiles1">the
configuration directory</a>  and named according  to the value  of the
stylesfile option in the <a href="#stanza_source">source</a> stanza of
the <a href="#sectionfiles2">main configuration file</a>.</p>

<p>Stanzas:
<ul>
  <li><a href="#stanza_type">Type</a> - defines a named Type</li>
  <li><a href="#stanza...">...</a></li>
  <li><a href="#stanza...">...</a></li>
</ul></p>

</fieldset><br />

<fieldset>
<legend id="sectionstanzas">Stanzas</legend>

<h5 id="stanza_source">source</h5>

<p>Describes a data source to ZMap. Multiple source stanzas allowed.</p>

<p>Members:
<ul>
  <li>url<p>The url where the data source is accessible. This follows usual url standards. Possible protocols are acedb, file and http.  Username and passwords maybe specified for sources as with basic http authentication. e.g. acedb://username:password@host.  Ports may also be appended to the hostname separated by a colon e.g. host:8080.</p></li>
  <li>sequence<p>a boolean to specify whether the data source can supply dna.</p></li>
  <li>writeback<p>a boolean to specify whether the data source can accept data to store.</p></li>
  <li>stylesfile<p>a filename for the <a href="#sectionfiles3">styles file</a></p></li>
  <li>featuresets<p>a list of types for ZMap to display.  This acts as a filter and orders the columns. See section on column ordering <a href="#column_ordering">below</a>.</p></li>
  <li>timeout </li>
  <li>version </li>
  <li>format </li>
</ul></p>

<h5 id="stanza_zmapwindow">ZMapWindow</h5>

<p></p>

<p>Members:
<ul>
  <li>keep_empty_columns<p>a boolean to tell ZMap whether to display empty columns</p></li>
  <li>canvas_maxsize</li>
  <li>colour_root</li>
  <li>colour_alignment</li>
  <li>colour_block</li>
  <li>colour_m_forward</li>
  <li>colour_m_reverse</li>
  <li>colour_q_forward</li>
  <li>colour_q_reverse</li>
  <li>colour_m_forwardcol</li>
  <li>colour_m_reversecol</li>
  <li>colour_q_forwardcol</li>
  <li>colour_q_reversecol</li>
</ul>

<h5 id="stanza_align">align</h5>

<p>A stop gap to specify alignments...</p>

<ul>
  <li>reference_strand</li>
  <li>reference_seq</li>
  <li>non_reference_seq</li>
  <li>reference_end</li>
  <li>non_reference_strand</li>
  <li>non_reference_end</li>
  <li>non_reference_start</li>
  <li>reference_start</li>
</ul>

</fieldset>
<br />

<fieldset>
<legend id="commandline">Command Line Options</legend>

<p>
ZMap recognises command line options starting with double dashes, as per the usage info here.
</p>

<pre id="usage" class="example">
Usage:
  zmap [OPTION...] <sequence name>

A multi-threaded genome browser and annotation tool.

Help Options:
  -?, --help                Show help options

Application Options:
  --version=<none>          Program version.
  --start=coord             Start coord in sequence, must be in range 1 -> seq_length.
  --end=coord               End coord in sequence, must be in range start -> seq_length, but end == 0 means show to end of sequence.
  --conf_file=file path     Relative or full path to configuration file.
  --conf_dir=directory      Relative or full path to configuration directory.
  --win_id=0x0000000        Window ID of the controlling application.
</pre>

</fieldset>
<br />


<!--

<fieldset>
<legend>The Styles File</legend>

<h5 id="stanza_type">Type</h5>

<p>Describes a style type. Multiple Type stanzas allowed.</p>

<ul>
  <li>name <p>The name of the type</p></li>
  <li>outline <p>The colour ZMap should use for the outline of features with this type [black]</p></li>
  <li>background <p>The colour ZMap should use for the background of features with this type [black]</p></li>
  <li>foreground <p>The colour ZMap should use for the foreground of features with this type [white]</p></li>
  <li>width <p>The width of the features.</p></li>
  <li>show_reverse <p>boolean to tell ZMap to display reverse as well as forward stranded features</p></li>
  <li>strand_specific <p>boolean to control strand ...</p></li>
  <li>frame_specific <p>boolean to control frame ...</p></li>
  <li>minmag <p>int to control the minimum magnification at which features of this type are visible</p></li>
  <li>bump <p>boolean to tell ZMap features with this type are bumpable.</p></li>
  <li>gapped_align <p>boolean to tell ZMap to display the indels of alignments</p></li>
  <li>read_gaps <p>boolean to control parsing of gap arrays (Currently forced true)</p></li>
</ul>

</fieldset>
<br />

-->

<fieldset>
<legend id="column_ordering">Column Ordering</legend>

<p>
There are two column orderings required for zmap, the columns in the main zmap window and the
column orderings in the navigator window. These are specified in the ZMap configuration file in
the "source" stanza:
</p>

<pre class="example">
source
{
featuresets = "Locus \"3 Frame\" \"3 Frame Translation\" vertebrate_mRNA Assembly_Tags etc."
navigator = "Genomic_canonical Locus Scale"
}
</pre>

<p>
(Note that feature set names can have embedded blanks)
</p>

<p>
These lists not only specify the order of columns but also control which feature sets will be
displayed, if the feature set (or its Column_group) is not in this list then the feature will not
be displayed.
</p>

</fieldset>
<br />


<fieldset>
<legend>Other Column Settings</legend>

<p>
acedb did not allow configuration of attributes such as "between column" spacing, we could
add this to the acedb database in the form of some kind of "meta style" but probably its
better to simply specify this in the configuration file.
</p>

<pre class="example">
Currently we have:

"canvas_maxsize"              maximum size in pixels of canvas window
"canvas_maxbases"             &lt;not used&gt;
"keep_empty_columns"          maintain empty columns to keep even spacing on screen between blocks
"display_forward_coords"      when specified means coords for reverse complement view are -ve of forward coords
"show_3_frame_reverse"        when specified means 3 frame cols are displayed on reverse strand as well

spacing:

"align_spacing"               these all control the horizontal space between various parts of zmap,
"block_spacing"               probably column spacing is the most relevant.
"strand_spacing"
"column_spacing"
"feature_spacing"

"feature_line_width"          controls default thickness of lines used for feature display.
</pre>

</fieldset>
<br />

<!--#include virtual="/perl/footer"-->
