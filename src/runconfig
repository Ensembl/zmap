#!/bin/bash
#
# Noddy script to run configure as alphas + Roys machine are far from standard.
#

SCRIPT_NAME=$(basename $0)
INITIAL_DIR=$(pwd)
 SCRIPT_DIR=$(dirname $0)
if ! echo $SCRIPT_DIR | egrep -q "(^)/" ; then
   BASE_DIR=$INITIAL_DIR/$SCRIPT_DIR
else
   BASE_DIR=$SCRIPT_DIR
fi

. $BASE_DIR/../scripts/zmap_functions.sh || { echo "Failed to load zmap_functions.sh"; exit 1; }
set -o history
. $BASE_DIR/../scripts/build_config.sh   || { echo "Failed to load build_config.sh";   exit 1; }

zmap_message_out "Start of script."

zmap_message_out "Running in $INITIAL_DIR on $(hostname) under $(uname)"

zmap_message_out "cmd line options = '$*'"

opsys=`uname`

case $opsys in

  OSF1 )
    locals=/nfs/team71/acedb/zmap/prefix/ALPHA/bin
    PATH="$locals:/usr/local/gtk2/bin:$PATH"
    export PATH

    # NOTE that currently the LDFLAGS stuff does not get through the configure step
    # and so does not work....not sure why....
    popt=/nfs/team71/acedb/zmap/prefix/ALPHA
    CC_args='CC=cc'

    # N.B. level5 messages just produces too much output for everyday use....
    CFLAGS_args="CFLAGS=-I$popt/include -msg_enable level4"
    LDFLAGS_args="LDFLAGS=-rpath /usr/local/gtk2/lib:$popt/lib"

    locals=/nfs/team71/acedb/zmap/prefix/ALPHA/lib/pkgconfig
    PKG_CONFIG_PATH="$locals:/usr/local/gtk2/lib/pkgconfig"
    export PKG_CONFIG_PATH 
    zmap_message_exit "No longer a supported operating system."
    ;;

  Linux )

    case `uname -m` in
      
	x86_64 )
	    
	    locals=~zmap/prefix/LINUX_64
	    PATH="$locals/bin:$PATH"
	    export PATH
	    
	    PKG_CONFIG_PATH="$locals/lib/pkgconfig"
	    export PKG_CONFIG_PATH
	    LD_LIBRARY_PATH="$locals/lib"
	    export LD_LIBRARY_PATH
	    
	    CFLAGS_args='CFLAGS=-Wall'
         # make sure zmap executable has path to foocanvas library.
	    LDFLAGS_args="LDFLAGS=-Xlinker -rpath -Xlinker $locals/lib" 
	    ;; # end x86_64

	* ) 

	    # For some reason aceconn isn't installed in GTK_PREFIX
	    # This should change asap. Production foocanvas is!
	    if [ "x$ACECONN_PREFIX" != "x" ]; then 
		zmap_register_prefix_in_env $ACECONN_PREFIX
		zmap_register_prefix_as_rpath $ACECONN_PREFIX
	    fi
	    # We need to find freetype2.pc in here. No idea why.
	    PKG_CONFIG_PATH="/usr/lib/pkgconfig:$PKG_CONFIG_PATH"

    
	    zmap_register_prefix_in_env $GTK_PREFIX
	    zmap_register_prefix_as_rpath $GTK_PREFIX

	    if [ "x$FOOCANVAS_DEV" == "x$ZMAP_TRUE" ] ; then
		zmap_register_prefix_in_env $FOOCANVAS_PREFIX
		zmap_register_prefix_as_rpath $FOOCANVAS_PREFIX
	    fi
	    
	    if [ "x$USE_GPROF" == "x$ZMAP_TRUE" ]; then
		LDFLAGS="-pg $LDFLAGS"
	    fi
	    # Now add LDFLAGS to args so they get through to configure.
	    LDFLAGS_args="$LDFLAGS $LDFLAGS_args"
	    ;; # end * 
    esac 
    ;; # end Linux

 Darwin )

    zmap_register_prefix_in_env $GTK_PREFIX

    CFLAGS_args="-Wall -I$GTK_PREFIX/include"

    if [ "x$FOOCANVAS_DEV" != "x$ZMAP_TRUE" ]; then 
	zmap_register_prefix_in_env $FOOCANVAS_PREFIX
    fi

    if [ "x$UNIVERSAL_BUILD" == "x$ZMAP_TRUE" ]; then
	SDK=/Developer/SDKs/MacOSX10.4u.sdk
	SPECIFIC_CONFIGURE_ARGS="--disable-dependency-tracking --with-macosx-sdk-path=$SDK --x-includes=$SDK/include --x-libraries=$SDK/lib"
	if [ -d $SDK/usr/bin ]; then
	    PATH=$SDK/usr/bin:$PATH
	fi
    fi

    LDFLAGS_args="$LDFLAGS $LDFLAGS_args"
    ;;
  * )
    zmap_message_exit "unsupported operating system: $opsys" ;;

esac

CC_param="CC=$CC_args"
CFLAGS_param="CFLAGS=$CFLAGS_args"
LDFLAGS_param="LDFLAGS=$LDFLAGS_args"

# Do these here.
export LD_LIBRARY_PATH
export LD_RUN_PATH
export PKG_CONFIG
export PKG_CONFIG_PATH
export ACLOCAL_FLAGS




zmap_message_out "Running " \
    $BASE_DIR/configure \
    $COMMON_CONFIGURE_ARGS \
    $SPECIFIC_CONFIGURE_ARGS \
    $CC_param $CFLAGS_param $LDFLAGS_param "$@"

zmap_message_out "=========================================================================="


# run the configure.......watch out for the quoting, sometimes we want the variable to
# be interpreted as a single cmdline arg, sometimes as multiple ones.

$BASE_DIR/configure \
$COMMON_CONFIGURE_ARGS \
$SPECIFIC_CONFIGURE_ARGS \
"$CFLAGS_param" "$LDFLAGS_param" "$@" || zmap_message_exit "configure script failed."


exit 0

