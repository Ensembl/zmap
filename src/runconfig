#!/bin/bash
#
# Noddy script to run configure as alphas + Roys machine are far from standard.
#
#
# PLEASE READ THIS BEFORE ALTERING THIS SCRIPT.....
#
# This script is called by the build scripts (in <zmap>/scripts) so you should
# NOT start adding command line flags and args or you will mess up the build !!!!
#
#

INSTALL_DIR=$1


SCRIPT_NAME=$(basename $0)
INITIAL_DIR=$(pwd)
 SCRIPT_DIR=$(dirname $0)
if ! echo $SCRIPT_DIR | egrep -q "(^)/" ; then
   BASE_DIR=$INITIAL_DIR/$SCRIPT_DIR
else
   BASE_DIR=$SCRIPT_DIR
fi

clean_dirs=''

. $BASE_DIR/../scripts/zmap_functions.sh || { echo "Failed to load zmap_functions.sh"; exit 1; }
set -o history
. $BASE_DIR/../scripts/build_config.sh   || { echo "Failed to load build_config.sh";   exit 1; }


zmap_message_out "Start of script."

zmap_message_out "Running in $INITIAL_DIR on $(hostname) under $(uname)"

zmap_message_out "cmd line options = '$*'"



opsys=`uname`

case $opsys in

  Linux )

    case `uname -m` in

	x86_64 )

	    # We need to find freetype2.pc in here. No idea why.
	    PKG_CONFIG_PATH="/usr/lib/pkgconfig:$PKG_CONFIG_PATH:/usr/share/pkgconfig"


	    zmap_register_prefix_in_env $GTK_PREFIX
	    zmap_register_prefix_as_rpath $GTK_PREFIX

	    if [ "x$USE_GPROF" == "x$ZMAP_TRUE" ]; then
		LDFLAGS="-pg $LDFLAGS"
                CFLAGS="-pg $CFLAGS"
	    fi

	    # Now add LDFLAGS to args so they get through to configure.
	    LDFLAGS_args="$LDFLAGS $LDFLAGS_args"

	    # Compile with PIC so that X11::XRemote compiles...
	    CFLAGS_args="$CFLAGS_args -fPIC"

	    ;; # end x86_64

	* )

	    # We need to find freetype2.pc in here. No idea why.
	    PKG_CONFIG_PATH="/usr/lib/pkgconfig:$PKG_CONFIG_PATH"


	    zmap_register_prefix_in_env $GTK_PREFIX
	    zmap_register_prefix_as_rpath $GTK_PREFIX

	    # add totalview memory debugging.
	    if [ "x$TVIEW_MEM" == "x$ZMAP_TRUE" ]; then
	      LDFLAGS="-L/usr/toolworks/memoryscape.3.2.3-0/linux-x86/lib -ltvheap -Wl,-rpath=/usr/toolworks/memoryscape.3.2.3-0/linux-x86/lib"
	    fi

	    # Add electric fence memory debugging lib.
	    if [ "x$ELECTRIC_MEM" == "x$ZMAP_TRUE" ]; then
              LDFLAGS="$HOME/downloads/electric-fence-2.1.13/libefence.a $LDFLAGS"
            fi


	    if [ "x$USE_GPROF" == "x$ZMAP_TRUE" ]; then
	      LDFLAGS="-pg $LDFLAGS"
              CFLAGS="-pg $CFLAGS"
	    fi


	    # Now add LDFLAGS to args so they get through to configure.
            CFLAGS_args="$CFLAGS $CFLAGS_args"
	    LDFLAGS_args="$LDFLAGS $LDFLAGS_args"


	    ;; # end *
    esac
    ;; # end Linux

 Darwin )

    zmap_register_prefix_in_env $GTK_PREFIX

    CFLAGS_args="-Wall -I$GTK_PREFIX/include"

    #if [ "x$UNIVERSAL_BUILD" == "x$ZMAP_TRUE" ]; then
	#SDK=/Developer/SDKs/MacOSX10.4u.sdk
	#SPECIFIC_CONFIGURE_ARGS="--disable-dependency-tracking --with-macosx-sdk-path=$SDK --x-includes=$SDK/include --x-libraries=$SDK/lib"
	#if [ -d $SDK/usr/bin ]; then
	    #PATH=$SDK/usr/bin:$PATH
	#fi
    #fi

    LDFLAGS_args="$LDFLAGS $LDFLAGS_args"
    ;;
  * )
    zmap_message_exit "unsupported operating system: $opsys" ;;

esac

CC_param="CC=$CC_args"
CFLAGS_param="CFLAGS=$CFLAGS_args"
LDFLAGS_param="LDFLAGS=$LDFLAGS_args"

# Do these here.
export LD_LIBRARY_PATH
export LD_RUN_PATH
export PKG_CONFIG
export PKG_CONFIG_PATH
export ACLOCAL_FLAGS




zmap_message_out "Running " \
    $BASE_DIR/configure \
    $INSTALL_DIR \
    $COMMON_CONFIGURE_ARGS \
    $SPECIFIC_CONFIGURE_ARGS \
    $CC_param $CFLAGS_param $LDFLAGS_param "$@"

zmap_message_out "=========================================================================="


# run the configure.......watch out for the quoting, sometimes we want the variable to
# be interpreted as a single cmdline arg, sometimes as multiple ones.

$BASE_DIR/configure \
$INSTALL_DIR \
$COMMON_CONFIGURE_ARGS \
$SPECIFIC_CONFIGURE_ARGS \
"$CFLAGS_param" "$LDFLAGS_param" "$@" || zmap_message_exit "configure script failed."


exit 0

