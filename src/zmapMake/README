================================================================================   
ZMapMake

Contains the make include file that has all the common macros, rules, etc.

Also contains some platform dependent make include files which define stuff
like the compiler/options etc.


Adding a new platform definition file
-------------------------------------

Copy the file platform.TEMPLATE to a new file in this directory using the following
naming convention:

		platform.PPPPPP_NN

		"platform" = compulsory prefix
		    PPPPPP = platform name
		        NN = platform operating system release

e.g.    platform.alpha_5

Set up any make MACRO values you may need to, e.g. CC = gcc and then make sure
you set the environment variable ZMAP_PLATFORM to be "PPPPPP" from above.


Adding a new directory to the make system
-----------------------------------------
(mgh 27 Nov 2009) These notes are out of date!

Here's how it works for me:

1) to build ZMap
mkdir somewhere
cd somewhere
cvszmap		// alias to set up env (setenv CVSROOT ':ext:cvs.internal.sanger.ac.uk:/repos/cvs/zmap')
cvs checkout ZMap	// get all the files
cd ZMap/src
./runbootstrap
cd build/linux	// or other system
../../runconfig
make

2) to add a directory with source files
- make the new directory and add some files
- add a Makefile.am (copy from another one and edit) This should make a library
- if it's a subdirectory then add the directory to the SUBDIRS command in the parent's Makefile.am and also add the library to that Makefile.am
- edit src/configure.ac and ad the directory or subdirectory to ZMAP_SRC_DIRS and/or AC_CONFIG_FILES
- then do the runbootrstrap and runconfig as above

Original notes follow:



Add the new directory to ZMap/src and then copy the file makefile.TEMPLATE
to the new directory.

Fill in all your macros but then make sure to fill in the CURRENT_xxx macros
with values for your directory.

The value of CURRENT_LIB should be either:

	ZMAPAPP_LIB for code that is part of the client application but _not_
		part of the ZMap code.

	ZMAP_LIB for code that is part of the ZMap code.

If you don't understand what this means then you need to ask !

CURRENT_OBJ is a list of the all the .o files you want compiled

CURRENT_DEP is a list of all the files the .o depend on.

CURRENT_SRC is a list of all the source files (.c and .h) you want linked
into the bin directory.


Note that you should not need to alter the code that sets ROOT_DIRECTORY and
includes the build make defines unless you create subdirectories within the
directory which you have just created. See zmapServer for an example of how
to set up the make in this case.
