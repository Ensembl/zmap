#!/usr/bin/env perl

# take a few (GFF) file arguments and create a minimal ZMap config file
# written following discussions about how to make ZMap run config free
# we assume that each file given contains data for the same sequence
# non matching files will be ignored
# files may be urls
# will create ~/.ZMap/ZMap by default
# one previous file is backed up to file~

use strict;
use warnings;

use Carp;
use Getopt::Long 'GetOptions';
use Pod::Usage;

use URI::Escape qw(uri_unescape);


# parameters
my %params = ();
my @options = qw ( help! man! start=i end=i sequence=s file=s );
my @required = qw ( );

my ($sequence, $start, $end);
my %src_files;



sub get_params
{
 	# defaults

	GetOptions(\%params, @options ) or pod2usage(2);

	pod2usage(1) if defined $params { 'help' };
	pod2usage(-exitstatus => 0, -verbose => 2) if defined $params {'man'} ;

	my $missing = 0;
	foreach my $param (@required)
	{
		if (!defined $params { $param })
		{
			print "$param not specified\n";
			$missing++;
		}
	}
	pod2usage(1) if $missing;

	$params{$_} = uri_unescape($params{$_}) for keys %params;

	return;
}



sub get_config
{
	my ($file) = @_;

	open my $file_h, '<', $file or return  "cannot open $file\n";

	while (<$file_h>)
	{
		last if(! m/^\#\#/ );

##gff-version 2
##source-version giface:ACEDB 4.9.50
##date 2010-05-18
##sequence-region B0250 1 39216

		if ( m/gff-version\s+(\d+)/ )
		{
			$src_files { $file } -> { 'gff_version' } = $1;

		}
		elsif ( m/sequence-region\s+(\S+)\s+(\d+)\s+(\d+)/ )
		{
			$src_files { $file } -> { 'sequence' } = $1;
			$src_files { $file } -> { 'start' } = $2;
			$src_files { $file } -> { 'end' } = $3;
		}
	}

	close $file_h;

	return "$file: GFF version not specified\n"  if !defined $src_files { $file } -> { 'gff_version' };
	return "$file: sequence not specified\n"  if !defined $src_files { $file } -> { 'sequence' };


	$sequence = $src_files { $file } -> { 'sequence' } if !defined $sequence;
	$start    = $src_files { $file } -> { 'start' }    if !defined $start;
	$end      = $src_files { $file } -> { 'end' } 	   if !defined $end;

	return "$file: ignored - different sequence\n"  if  $src_files { $file } -> { 'sequence' } ne $sequence;

	return 0;	# ie success
}


sub main
{
	get_params;

	# if not set in command line these get set by the first file
	$sequence = $params { 'sequence' } if(defined $params { 'sequence' });
	$start    = $params { 'start' }    if(defined $params { 'start' });
	$end      = $params { 'end' }      if(defined $params { 'end' });

	my $file = $params { 'file' };
	$file = $ENV{HOME} . "/.ZMap/ZMap" if !defined $file;

	if( -r $file)
	{
		my $backfile = $file . '~';

		unlink "$backfile"  if -r $backfile;
		rename $file, $backfile;
	}

	open (my $file_h, '>', $file ) or die("cannot open $file\n");

	my @sources = ();
	foreach my $file (@ARGV)
	{
		if (get_config($file))
		{
			print $_;
		}
		else
		{
			my $src = $file;
			$src =~ s/\.gff//;
			$src_files { $file } -> { 'source' } = $src;
			push @sources, $src;
		}

	}

	$" = ';';
	print $file_h <<ZMAP
[ZMap]
show-mainwindow = true
sequence = $sequence
start = $start
end = $end
sources = @sources
navigatorsets = scale ; genomic_canonical ; locus

ZMAP
;
	# explicitly we do not create a columns list or stanza

	 print $file_h <<ZMAP_WINDOW
[ZMapWindow]
colour-column-highlight = cornsilk
colour-frame-2 = #e6e6ff
canvas-maxsize = 10000
feature-line-width = 1
feature-spacing = 4.0
colour-frame-1 = #e6ffe6
colour-frame-0 = #ffe6e6

ZMAP_WINDOW
;


	foreach my $fname (keys %src_files)
	{
		my $src = $src_files { $fname} -> { 'source' };
		my $sep = ( $src =~ m/^\// ) ? '/' : '';
		print $file_h <<MY_FILE
[$src]
delayed = false
featuresets=
url=file:///$sep$fname

MY_FILE
;
	}

	close $file_h;

	return;
}


main() ;



=head1 NAME

run_zmap reads gff files and creates a ZMap configuration file that can be used to display those
files using zmap

=head1 SYNOPSIS

run_zmap [--help] [--man] [--file=/path/for/output_config_file] [--start=NN] [--end=NN] [--sequence=seq] gff_file
gff_file....

=head1 OPTIONS

=over 8

=item B<--help>
Print a brief help message and exits.

=item B<--man>
Prints the manual page and exits.

=item B<--file>
by default config file is written to ~/.ZMap/ZMap, specify a different file with this flag.

=item B<--start>
set start range for sequence to be displayed by zmap, default is derived from gff files.

=item B<--end>
set end range for sequence to be displayed by zmap, default is derived from gff files.

=item B<--sequence>
set name of sequence to be displayed by zmap, default is derived from gff files.



=back

=head1 DESCRIPTION

B<This program> will read the given input gff file(s) and create a ZMap config
file which can be used with a zmap binary to display the features within those
gff files.

=head1 COPYRIGHT

 Copyright (c) 2006-2012: Genome Research Ltd.
------------------------------------------------------------------
ZMap is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
or see the on-line version at http://www.gnu.org/copyleft/gpl.txt
------------------------------------------------------------------
This file is part of the ZMap genome database package
originated by
     Ed Griffiths (Sanger Institute, UK) edgrif@sanger.ac.uk,
       Roy Storey (Sanger Institute, UK) rds@sanger.ac.uk,
  Malcolm Hinsley (Sanger Institute, UK) mh17@sanger.ac.uk

=head1 AUTHOR

Malcolm Hinsley B<email> mh17@sanger.ac.uk
